/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;


import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class UpdateEmailAddressRequest {

    /**
     * The ID of the email address to update
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=email_address_id")
    private String emailAddressId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private UpdateEmailAddressRequestBody requestBody;

    @JsonCreator
    public UpdateEmailAddressRequest(
            String emailAddressId,
            UpdateEmailAddressRequestBody requestBody) {
        Utils.checkNotNull(emailAddressId, "emailAddressId");
        Utils.checkNotNull(requestBody, "requestBody");
        this.emailAddressId = emailAddressId;
        this.requestBody = requestBody;
    }

    /**
     * The ID of the email address to update
     */
    @JsonIgnore
    public String emailAddressId() {
        return emailAddressId;
    }

    @JsonIgnore
    public UpdateEmailAddressRequestBody requestBody() {
        return requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the email address to update
     */
    public UpdateEmailAddressRequest withEmailAddressId(String emailAddressId) {
        Utils.checkNotNull(emailAddressId, "emailAddressId");
        this.emailAddressId = emailAddressId;
        return this;
    }

    public UpdateEmailAddressRequest withRequestBody(UpdateEmailAddressRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateEmailAddressRequest other = (UpdateEmailAddressRequest) o;
        return 
            Objects.deepEquals(this.emailAddressId, other.emailAddressId) &&
            Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            emailAddressId,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateEmailAddressRequest.class,
                "emailAddressId", emailAddressId,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String emailAddressId;
 
        private UpdateEmailAddressRequestBody requestBody;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the email address to update
         */
        public Builder emailAddressId(String emailAddressId) {
            Utils.checkNotNull(emailAddressId, "emailAddressId");
            this.emailAddressId = emailAddressId;
            return this;
        }

        public Builder requestBody(UpdateEmailAddressRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public UpdateEmailAddressRequest build() {
            return new UpdateEmailAddressRequest(
                emailAddressId,
                requestBody);
        }
    }
}

