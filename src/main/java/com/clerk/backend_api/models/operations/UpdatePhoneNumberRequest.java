/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class UpdatePhoneNumberRequest {

    /**
     * The ID of the phone number to update
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=phone_number_id")
    private String phoneNumberId;

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends UpdatePhoneNumberRequestBody> requestBody;

    @JsonCreator
    public UpdatePhoneNumberRequest(
            String phoneNumberId,
            Optional<? extends UpdatePhoneNumberRequestBody> requestBody) {
        Utils.checkNotNull(phoneNumberId, "phoneNumberId");
        Utils.checkNotNull(requestBody, "requestBody");
        this.phoneNumberId = phoneNumberId;
        this.requestBody = requestBody;
    }
    
    public UpdatePhoneNumberRequest(
            String phoneNumberId) {
        this(phoneNumberId, Optional.empty());
    }

    /**
     * The ID of the phone number to update
     */
    @JsonIgnore
    public String phoneNumberId() {
        return phoneNumberId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdatePhoneNumberRequestBody> requestBody() {
        return (Optional<UpdatePhoneNumberRequestBody>) requestBody;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the phone number to update
     */
    public UpdatePhoneNumberRequest withPhoneNumberId(String phoneNumberId) {
        Utils.checkNotNull(phoneNumberId, "phoneNumberId");
        this.phoneNumberId = phoneNumberId;
        return this;
    }

    public UpdatePhoneNumberRequest withRequestBody(UpdatePhoneNumberRequestBody requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    public UpdatePhoneNumberRequest withRequestBody(Optional<? extends UpdatePhoneNumberRequestBody> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdatePhoneNumberRequest other = (UpdatePhoneNumberRequest) o;
        return 
            java.util.Objects.deepEquals(this.phoneNumberId, other.phoneNumberId) &&
            java.util.Objects.deepEquals(this.requestBody, other.requestBody);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            phoneNumberId,
            requestBody);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdatePhoneNumberRequest.class,
                "phoneNumberId", phoneNumberId,
                "requestBody", requestBody);
    }
    
    public final static class Builder {
 
        private String phoneNumberId;
 
        private Optional<? extends UpdatePhoneNumberRequestBody> requestBody = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the phone number to update
         */
        public Builder phoneNumberId(String phoneNumberId) {
            Utils.checkNotNull(phoneNumberId, "phoneNumberId");
            this.phoneNumberId = phoneNumberId;
            return this;
        }

        public Builder requestBody(UpdatePhoneNumberRequestBody requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        public Builder requestBody(Optional<? extends UpdatePhoneNumberRequestBody> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }
        
        public UpdatePhoneNumberRequest build() {
            return new UpdatePhoneNumberRequest(
                phoneNumberId,
                requestBody);
        }
    }
}

