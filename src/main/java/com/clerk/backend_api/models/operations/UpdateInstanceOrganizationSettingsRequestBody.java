/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdateInstanceOrganizationSettingsRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enabled")
    private JsonNullable<? extends Boolean> enabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_allowed_memberships")
    private JsonNullable<? extends Long> maxAllowedMemberships;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin_delete_enabled")
    private JsonNullable<? extends Boolean> adminDeleteEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains_enabled")
    private JsonNullable<? extends Boolean> domainsEnabled;

    /**
     * Specify which enrollment modes to enable for your Organization Domains.
     * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains_enrollment_modes")
    private Optional<? extends java.util.List<String>> domainsEnrollmentModes;

    /**
     * Specify what the default organization role is for an organization creator.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator_role_id")
    private Optional<? extends String> creatorRoleId;

    /**
     * Specify what the default organization role is for the organization domains.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domains_default_role_id")
    private Optional<? extends String> domainsDefaultRoleId;

    @JsonCreator
    public UpdateInstanceOrganizationSettingsRequestBody(
            @JsonProperty("enabled") JsonNullable<? extends Boolean> enabled,
            @JsonProperty("max_allowed_memberships") JsonNullable<? extends Long> maxAllowedMemberships,
            @JsonProperty("admin_delete_enabled") JsonNullable<? extends Boolean> adminDeleteEnabled,
            @JsonProperty("domains_enabled") JsonNullable<? extends Boolean> domainsEnabled,
            @JsonProperty("domains_enrollment_modes") Optional<? extends java.util.List<String>> domainsEnrollmentModes,
            @JsonProperty("creator_role_id") Optional<? extends String> creatorRoleId,
            @JsonProperty("domains_default_role_id") Optional<? extends String> domainsDefaultRoleId) {
        Utils.checkNotNull(enabled, "enabled");
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        Utils.checkNotNull(domainsEnabled, "domainsEnabled");
        Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
        Utils.checkNotNull(creatorRoleId, "creatorRoleId");
        Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
        this.enabled = enabled;
        this.maxAllowedMemberships = maxAllowedMemberships;
        this.adminDeleteEnabled = adminDeleteEnabled;
        this.domainsEnabled = domainsEnabled;
        this.domainsEnrollmentModes = domainsEnrollmentModes;
        this.creatorRoleId = creatorRoleId;
        this.domainsDefaultRoleId = domainsDefaultRoleId;
    }
    
    public UpdateInstanceOrganizationSettingsRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Boolean> enabled() {
        return (JsonNullable<Boolean>) enabled;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Long> maxAllowedMemberships() {
        return (JsonNullable<Long>) maxAllowedMemberships;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Boolean> adminDeleteEnabled() {
        return (JsonNullable<Boolean>) adminDeleteEnabled;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Boolean> domainsEnabled() {
        return (JsonNullable<Boolean>) domainsEnabled;
    }

    /**
     * Specify which enrollment modes to enable for your Organization Domains.
     * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> domainsEnrollmentModes() {
        return (Optional<java.util.List<String>>) domainsEnrollmentModes;
    }

    /**
     * Specify what the default organization role is for an organization creator.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> creatorRoleId() {
        return (Optional<String>) creatorRoleId;
    }

    /**
     * Specify what the default organization role is for the organization domains.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> domainsDefaultRoleId() {
        return (Optional<String>) domainsDefaultRoleId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateInstanceOrganizationSettingsRequestBody withEnabled(boolean enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = JsonNullable.of(enabled);
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withEnabled(JsonNullable<? extends Boolean> enabled) {
        Utils.checkNotNull(enabled, "enabled");
        this.enabled = enabled;
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withMaxAllowedMemberships(long maxAllowedMemberships) {
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        this.maxAllowedMemberships = JsonNullable.of(maxAllowedMemberships);
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withMaxAllowedMemberships(JsonNullable<? extends Long> maxAllowedMemberships) {
        Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
        this.maxAllowedMemberships = maxAllowedMemberships;
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withAdminDeleteEnabled(boolean adminDeleteEnabled) {
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        this.adminDeleteEnabled = JsonNullable.of(adminDeleteEnabled);
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withAdminDeleteEnabled(JsonNullable<? extends Boolean> adminDeleteEnabled) {
        Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
        this.adminDeleteEnabled = adminDeleteEnabled;
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withDomainsEnabled(boolean domainsEnabled) {
        Utils.checkNotNull(domainsEnabled, "domainsEnabled");
        this.domainsEnabled = JsonNullable.of(domainsEnabled);
        return this;
    }

    public UpdateInstanceOrganizationSettingsRequestBody withDomainsEnabled(JsonNullable<? extends Boolean> domainsEnabled) {
        Utils.checkNotNull(domainsEnabled, "domainsEnabled");
        this.domainsEnabled = domainsEnabled;
        return this;
    }

    /**
     * Specify which enrollment modes to enable for your Organization Domains.
     * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withDomainsEnrollmentModes(java.util.List<String> domainsEnrollmentModes) {
        Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
        this.domainsEnrollmentModes = Optional.ofNullable(domainsEnrollmentModes);
        return this;
    }

    /**
     * Specify which enrollment modes to enable for your Organization Domains.
     * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withDomainsEnrollmentModes(Optional<? extends java.util.List<String>> domainsEnrollmentModes) {
        Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
        this.domainsEnrollmentModes = domainsEnrollmentModes;
        return this;
    }

    /**
     * Specify what the default organization role is for an organization creator.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withCreatorRoleId(String creatorRoleId) {
        Utils.checkNotNull(creatorRoleId, "creatorRoleId");
        this.creatorRoleId = Optional.ofNullable(creatorRoleId);
        return this;
    }

    /**
     * Specify what the default organization role is for an organization creator.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withCreatorRoleId(Optional<? extends String> creatorRoleId) {
        Utils.checkNotNull(creatorRoleId, "creatorRoleId");
        this.creatorRoleId = creatorRoleId;
        return this;
    }

    /**
     * Specify what the default organization role is for the organization domains.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withDomainsDefaultRoleId(String domainsDefaultRoleId) {
        Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
        this.domainsDefaultRoleId = Optional.ofNullable(domainsDefaultRoleId);
        return this;
    }

    /**
     * Specify what the default organization role is for the organization domains.
     */
    public UpdateInstanceOrganizationSettingsRequestBody withDomainsDefaultRoleId(Optional<? extends String> domainsDefaultRoleId) {
        Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
        this.domainsDefaultRoleId = domainsDefaultRoleId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateInstanceOrganizationSettingsRequestBody other = (UpdateInstanceOrganizationSettingsRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.enabled, other.enabled) &&
            java.util.Objects.deepEquals(this.maxAllowedMemberships, other.maxAllowedMemberships) &&
            java.util.Objects.deepEquals(this.adminDeleteEnabled, other.adminDeleteEnabled) &&
            java.util.Objects.deepEquals(this.domainsEnabled, other.domainsEnabled) &&
            java.util.Objects.deepEquals(this.domainsEnrollmentModes, other.domainsEnrollmentModes) &&
            java.util.Objects.deepEquals(this.creatorRoleId, other.creatorRoleId) &&
            java.util.Objects.deepEquals(this.domainsDefaultRoleId, other.domainsDefaultRoleId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            enabled,
            maxAllowedMemberships,
            adminDeleteEnabled,
            domainsEnabled,
            domainsEnrollmentModes,
            creatorRoleId,
            domainsDefaultRoleId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateInstanceOrganizationSettingsRequestBody.class,
                "enabled", enabled,
                "maxAllowedMemberships", maxAllowedMemberships,
                "adminDeleteEnabled", adminDeleteEnabled,
                "domainsEnabled", domainsEnabled,
                "domainsEnrollmentModes", domainsEnrollmentModes,
                "creatorRoleId", creatorRoleId,
                "domainsDefaultRoleId", domainsDefaultRoleId);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Boolean> enabled = JsonNullable.undefined();
 
        private JsonNullable<? extends Long> maxAllowedMemberships = JsonNullable.undefined();
 
        private JsonNullable<? extends Boolean> adminDeleteEnabled = JsonNullable.undefined();
 
        private JsonNullable<? extends Boolean> domainsEnabled = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<String>> domainsEnrollmentModes = Optional.empty();
 
        private Optional<? extends String> creatorRoleId = Optional.empty();
 
        private Optional<? extends String> domainsDefaultRoleId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder enabled(boolean enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = JsonNullable.of(enabled);
            return this;
        }

        public Builder enabled(JsonNullable<? extends Boolean> enabled) {
            Utils.checkNotNull(enabled, "enabled");
            this.enabled = enabled;
            return this;
        }

        public Builder maxAllowedMemberships(long maxAllowedMemberships) {
            Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
            this.maxAllowedMemberships = JsonNullable.of(maxAllowedMemberships);
            return this;
        }

        public Builder maxAllowedMemberships(JsonNullable<? extends Long> maxAllowedMemberships) {
            Utils.checkNotNull(maxAllowedMemberships, "maxAllowedMemberships");
            this.maxAllowedMemberships = maxAllowedMemberships;
            return this;
        }

        public Builder adminDeleteEnabled(boolean adminDeleteEnabled) {
            Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
            this.adminDeleteEnabled = JsonNullable.of(adminDeleteEnabled);
            return this;
        }

        public Builder adminDeleteEnabled(JsonNullable<? extends Boolean> adminDeleteEnabled) {
            Utils.checkNotNull(adminDeleteEnabled, "adminDeleteEnabled");
            this.adminDeleteEnabled = adminDeleteEnabled;
            return this;
        }

        public Builder domainsEnabled(boolean domainsEnabled) {
            Utils.checkNotNull(domainsEnabled, "domainsEnabled");
            this.domainsEnabled = JsonNullable.of(domainsEnabled);
            return this;
        }

        public Builder domainsEnabled(JsonNullable<? extends Boolean> domainsEnabled) {
            Utils.checkNotNull(domainsEnabled, "domainsEnabled");
            this.domainsEnabled = domainsEnabled;
            return this;
        }

        /**
         * Specify which enrollment modes to enable for your Organization Domains.
         * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
         */
        public Builder domainsEnrollmentModes(java.util.List<String> domainsEnrollmentModes) {
            Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
            this.domainsEnrollmentModes = Optional.ofNullable(domainsEnrollmentModes);
            return this;
        }

        /**
         * Specify which enrollment modes to enable for your Organization Domains.
         * Supported modes are 'automatic_invitation' &amp; 'automatic_suggestion'.
         */
        public Builder domainsEnrollmentModes(Optional<? extends java.util.List<String>> domainsEnrollmentModes) {
            Utils.checkNotNull(domainsEnrollmentModes, "domainsEnrollmentModes");
            this.domainsEnrollmentModes = domainsEnrollmentModes;
            return this;
        }

        /**
         * Specify what the default organization role is for an organization creator.
         */
        public Builder creatorRoleId(String creatorRoleId) {
            Utils.checkNotNull(creatorRoleId, "creatorRoleId");
            this.creatorRoleId = Optional.ofNullable(creatorRoleId);
            return this;
        }

        /**
         * Specify what the default organization role is for an organization creator.
         */
        public Builder creatorRoleId(Optional<? extends String> creatorRoleId) {
            Utils.checkNotNull(creatorRoleId, "creatorRoleId");
            this.creatorRoleId = creatorRoleId;
            return this;
        }

        /**
         * Specify what the default organization role is for the organization domains.
         */
        public Builder domainsDefaultRoleId(String domainsDefaultRoleId) {
            Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
            this.domainsDefaultRoleId = Optional.ofNullable(domainsDefaultRoleId);
            return this;
        }

        /**
         * Specify what the default organization role is for the organization domains.
         */
        public Builder domainsDefaultRoleId(Optional<? extends String> domainsDefaultRoleId) {
            Utils.checkNotNull(domainsDefaultRoleId, "domainsDefaultRoleId");
            this.domainsDefaultRoleId = domainsDefaultRoleId;
            return this;
        }
        
        public UpdateInstanceOrganizationSettingsRequestBody build() {
            return new UpdateInstanceOrganizationSettingsRequestBody(
                enabled,
                maxAllowedMemberships,
                adminDeleteEnabled,
                domainsEnabled,
                domainsEnrollmentModes,
                creatorRoleId,
                domainsDefaultRoleId);
        }
    }
}

