/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class UpdateOrganizationMembershipMetadataRequestBody {

    /**
     * Metadata saved on the organization membership, that is visible to both your frontend and backend.
     * The new object will be merged with the existing value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends UpdateOrganizationMembershipMetadataPublicMetadata> publicMetadata;

    /**
     * Metadata saved on the organization membership that is only visible to your backend.
     * The new object will be merged with the existing value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private Optional<? extends UpdateOrganizationMembershipMetadataPrivateMetadata> privateMetadata;

    @JsonCreator
    public UpdateOrganizationMembershipMetadataRequestBody(
            @JsonProperty("public_metadata") Optional<? extends UpdateOrganizationMembershipMetadataPublicMetadata> publicMetadata,
            @JsonProperty("private_metadata") Optional<? extends UpdateOrganizationMembershipMetadataPrivateMetadata> privateMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
    }
    
    public UpdateOrganizationMembershipMetadataRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Metadata saved on the organization membership, that is visible to both your frontend and backend.
     * The new object will be merged with the existing value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateOrganizationMembershipMetadataPublicMetadata> publicMetadata() {
        return (Optional<UpdateOrganizationMembershipMetadataPublicMetadata>) publicMetadata;
    }

    /**
     * Metadata saved on the organization membership that is only visible to your backend.
     * The new object will be merged with the existing value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UpdateOrganizationMembershipMetadataPrivateMetadata> privateMetadata() {
        return (Optional<UpdateOrganizationMembershipMetadataPrivateMetadata>) privateMetadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Metadata saved on the organization membership, that is visible to both your frontend and backend.
     * The new object will be merged with the existing value.
     */
    public UpdateOrganizationMembershipMetadataRequestBody withPublicMetadata(UpdateOrganizationMembershipMetadataPublicMetadata publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    /**
     * Metadata saved on the organization membership, that is visible to both your frontend and backend.
     * The new object will be merged with the existing value.
     */
    public UpdateOrganizationMembershipMetadataRequestBody withPublicMetadata(Optional<? extends UpdateOrganizationMembershipMetadataPublicMetadata> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    /**
     * Metadata saved on the organization membership that is only visible to your backend.
     * The new object will be merged with the existing value.
     */
    public UpdateOrganizationMembershipMetadataRequestBody withPrivateMetadata(UpdateOrganizationMembershipMetadataPrivateMetadata privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = Optional.ofNullable(privateMetadata);
        return this;
    }

    /**
     * Metadata saved on the organization membership that is only visible to your backend.
     * The new object will be merged with the existing value.
     */
    public UpdateOrganizationMembershipMetadataRequestBody withPrivateMetadata(Optional<? extends UpdateOrganizationMembershipMetadataPrivateMetadata> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateOrganizationMembershipMetadataRequestBody other = (UpdateOrganizationMembershipMetadataRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            java.util.Objects.deepEquals(this.privateMetadata, other.privateMetadata);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            publicMetadata,
            privateMetadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateOrganizationMembershipMetadataRequestBody.class,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata);
    }
    
    public final static class Builder {
 
        private Optional<? extends UpdateOrganizationMembershipMetadataPublicMetadata> publicMetadata = Optional.empty();
 
        private Optional<? extends UpdateOrganizationMembershipMetadataPrivateMetadata> privateMetadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Metadata saved on the organization membership, that is visible to both your frontend and backend.
         * The new object will be merged with the existing value.
         */
        public Builder publicMetadata(UpdateOrganizationMembershipMetadataPublicMetadata publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        /**
         * Metadata saved on the organization membership, that is visible to both your frontend and backend.
         * The new object will be merged with the existing value.
         */
        public Builder publicMetadata(Optional<? extends UpdateOrganizationMembershipMetadataPublicMetadata> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        /**
         * Metadata saved on the organization membership that is only visible to your backend.
         * The new object will be merged with the existing value.
         */
        public Builder privateMetadata(UpdateOrganizationMembershipMetadataPrivateMetadata privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = Optional.ofNullable(privateMetadata);
            return this;
        }

        /**
         * Metadata saved on the organization membership that is only visible to your backend.
         * The new object will be merged with the existing value.
         */
        public Builder privateMetadata(Optional<? extends UpdateOrganizationMembershipMetadataPrivateMetadata> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }
        
        public UpdateOrganizationMembershipMetadataRequestBody build() {
            return new UpdateOrganizationMembershipMetadataRequestBody(
                publicMetadata,
                privateMetadata);
        }
    }
}

