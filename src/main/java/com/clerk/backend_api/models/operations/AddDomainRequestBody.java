/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class AddDomainRequestBody {

    /**
     * The new domain name. Can contain the port for development instances.
     */
    @JsonProperty("name")
    private String name;

    /**
     * Marks the new domain as satellite. Only `true` is accepted at the moment.
     */
    @JsonProperty("is_satellite")
    private boolean isSatellite;

    /**
     * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxy_url")
    private Optional<? extends String> proxyUrl;

    @JsonCreator
    public AddDomainRequestBody(
            @JsonProperty("name") String name,
            @JsonProperty("is_satellite") boolean isSatellite,
            @JsonProperty("proxy_url") Optional<? extends String> proxyUrl) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(isSatellite, "isSatellite");
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.name = name;
        this.isSatellite = isSatellite;
        this.proxyUrl = proxyUrl;
    }
    
    public AddDomainRequestBody(
            String name,
            boolean isSatellite) {
        this(name, isSatellite, Optional.empty());
    }

    /**
     * The new domain name. Can contain the port for development instances.
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Marks the new domain as satellite. Only `true` is accepted at the moment.
     */
    @JsonIgnore
    public boolean isSatellite() {
        return isSatellite;
    }

    /**
     * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> proxyUrl() {
        return (Optional<String>) proxyUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The new domain name. Can contain the port for development instances.
     */
    public AddDomainRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Marks the new domain as satellite. Only `true` is accepted at the moment.
     */
    public AddDomainRequestBody withIsSatellite(boolean isSatellite) {
        Utils.checkNotNull(isSatellite, "isSatellite");
        this.isSatellite = isSatellite;
        return this;
    }

    /**
     * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances.
     */
    public AddDomainRequestBody withProxyUrl(String proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = Optional.ofNullable(proxyUrl);
        return this;
    }

    /**
     * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances.
     */
    public AddDomainRequestBody withProxyUrl(Optional<? extends String> proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = proxyUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AddDomainRequestBody other = (AddDomainRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.isSatellite, other.isSatellite) &&
            java.util.Objects.deepEquals(this.proxyUrl, other.proxyUrl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            isSatellite,
            proxyUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AddDomainRequestBody.class,
                "name", name,
                "isSatellite", isSatellite,
                "proxyUrl", proxyUrl);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Boolean isSatellite;
 
        private Optional<? extends String> proxyUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The new domain name. Can contain the port for development instances.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Marks the new domain as satellite. Only `true` is accepted at the moment.
         */
        public Builder isSatellite(boolean isSatellite) {
            Utils.checkNotNull(isSatellite, "isSatellite");
            this.isSatellite = isSatellite;
            return this;
        }

        /**
         * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances.
         */
        public Builder proxyUrl(String proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = Optional.ofNullable(proxyUrl);
            return this;
        }

        /**
         * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. Applicable only to production instances.
         */
        public Builder proxyUrl(Optional<? extends String> proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = proxyUrl;
            return this;
        }
        
        public AddDomainRequestBody build() {
            return new AddDomainRequestBody(
                name,
                isSatellite,
                proxyUrl);
        }
    }
}

