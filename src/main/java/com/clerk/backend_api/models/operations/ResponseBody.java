/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class ResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends String> object;

    /**
     * External account ID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_account_id")
    private Optional<? extends String> externalAccountId;

    /**
     * The unique ID of the user in the external provider's system
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider_user_id")
    private Optional<? extends String> providerUserId;

    /**
     * The access token
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    private Optional<? extends String> token;

    /**
     * The ID of the provider
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("provider")
    private Optional<? extends String> provider;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends GetOAuthAccessTokenPublicMetadata> publicMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private JsonNullable<? extends String> label;

    /**
     * The list of scopes that the token is valid for.
     * Only present for OAuth 2.0 tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scopes")
    private Optional<? extends java.util.List<String>> scopes;

    /**
     * The token secret. Only present for OAuth 1.0 tokens.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_secret")
    private Optional<? extends String> tokenSecret;

    @JsonCreator
    public ResponseBody(
            @JsonProperty("object") Optional<? extends String> object,
            @JsonProperty("external_account_id") Optional<? extends String> externalAccountId,
            @JsonProperty("provider_user_id") Optional<? extends String> providerUserId,
            @JsonProperty("token") Optional<? extends String> token,
            @JsonProperty("provider") Optional<? extends String> provider,
            @JsonProperty("public_metadata") Optional<? extends GetOAuthAccessTokenPublicMetadata> publicMetadata,
            @JsonProperty("label") JsonNullable<? extends String> label,
            @JsonProperty("scopes") Optional<? extends java.util.List<String>> scopes,
            @JsonProperty("token_secret") Optional<? extends String> tokenSecret) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(externalAccountId, "externalAccountId");
        Utils.checkNotNull(providerUserId, "providerUserId");
        Utils.checkNotNull(token, "token");
        Utils.checkNotNull(provider, "provider");
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(scopes, "scopes");
        Utils.checkNotNull(tokenSecret, "tokenSecret");
        this.object = object;
        this.externalAccountId = externalAccountId;
        this.providerUserId = providerUserId;
        this.token = token;
        this.provider = provider;
        this.publicMetadata = publicMetadata;
        this.label = label;
        this.scopes = scopes;
        this.tokenSecret = tokenSecret;
    }
    
    public ResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> object() {
        return (Optional<String>) object;
    }

    /**
     * External account ID
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> externalAccountId() {
        return (Optional<String>) externalAccountId;
    }

    /**
     * The unique ID of the user in the external provider's system
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> providerUserId() {
        return (Optional<String>) providerUserId;
    }

    /**
     * The access token
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> token() {
        return (Optional<String>) token;
    }

    /**
     * The ID of the provider
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> provider() {
        return (Optional<String>) provider;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GetOAuthAccessTokenPublicMetadata> publicMetadata() {
        return (Optional<GetOAuthAccessTokenPublicMetadata>) publicMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> label() {
        return (JsonNullable<String>) label;
    }

    /**
     * The list of scopes that the token is valid for.
     * Only present for OAuth 2.0 tokens.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> scopes() {
        return (Optional<java.util.List<String>>) scopes;
    }

    /**
     * The token secret. Only present for OAuth 1.0 tokens.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> tokenSecret() {
        return (Optional<String>) tokenSecret;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ResponseBody withObject(String object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    public ResponseBody withObject(Optional<? extends String> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * External account ID
     */
    public ResponseBody withExternalAccountId(String externalAccountId) {
        Utils.checkNotNull(externalAccountId, "externalAccountId");
        this.externalAccountId = Optional.ofNullable(externalAccountId);
        return this;
    }

    /**
     * External account ID
     */
    public ResponseBody withExternalAccountId(Optional<? extends String> externalAccountId) {
        Utils.checkNotNull(externalAccountId, "externalAccountId");
        this.externalAccountId = externalAccountId;
        return this;
    }

    /**
     * The unique ID of the user in the external provider's system
     */
    public ResponseBody withProviderUserId(String providerUserId) {
        Utils.checkNotNull(providerUserId, "providerUserId");
        this.providerUserId = Optional.ofNullable(providerUserId);
        return this;
    }

    /**
     * The unique ID of the user in the external provider's system
     */
    public ResponseBody withProviderUserId(Optional<? extends String> providerUserId) {
        Utils.checkNotNull(providerUserId, "providerUserId");
        this.providerUserId = providerUserId;
        return this;
    }

    /**
     * The access token
     */
    public ResponseBody withToken(String token) {
        Utils.checkNotNull(token, "token");
        this.token = Optional.ofNullable(token);
        return this;
    }

    /**
     * The access token
     */
    public ResponseBody withToken(Optional<? extends String> token) {
        Utils.checkNotNull(token, "token");
        this.token = token;
        return this;
    }

    /**
     * The ID of the provider
     */
    public ResponseBody withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = Optional.ofNullable(provider);
        return this;
    }

    /**
     * The ID of the provider
     */
    public ResponseBody withProvider(Optional<? extends String> provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }

    public ResponseBody withPublicMetadata(GetOAuthAccessTokenPublicMetadata publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    public ResponseBody withPublicMetadata(Optional<? extends GetOAuthAccessTokenPublicMetadata> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public ResponseBody withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = JsonNullable.of(label);
        return this;
    }

    public ResponseBody withLabel(JsonNullable<? extends String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    /**
     * The list of scopes that the token is valid for.
     * Only present for OAuth 2.0 tokens.
     */
    public ResponseBody withScopes(java.util.List<String> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = Optional.ofNullable(scopes);
        return this;
    }

    /**
     * The list of scopes that the token is valid for.
     * Only present for OAuth 2.0 tokens.
     */
    public ResponseBody withScopes(Optional<? extends java.util.List<String>> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    /**
     * The token secret. Only present for OAuth 1.0 tokens.
     */
    public ResponseBody withTokenSecret(String tokenSecret) {
        Utils.checkNotNull(tokenSecret, "tokenSecret");
        this.tokenSecret = Optional.ofNullable(tokenSecret);
        return this;
    }

    /**
     * The token secret. Only present for OAuth 1.0 tokens.
     */
    public ResponseBody withTokenSecret(Optional<? extends String> tokenSecret) {
        Utils.checkNotNull(tokenSecret, "tokenSecret");
        this.tokenSecret = tokenSecret;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ResponseBody other = (ResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.object, other.object) &&
            java.util.Objects.deepEquals(this.externalAccountId, other.externalAccountId) &&
            java.util.Objects.deepEquals(this.providerUserId, other.providerUserId) &&
            java.util.Objects.deepEquals(this.token, other.token) &&
            java.util.Objects.deepEquals(this.provider, other.provider) &&
            java.util.Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            java.util.Objects.deepEquals(this.label, other.label) &&
            java.util.Objects.deepEquals(this.scopes, other.scopes) &&
            java.util.Objects.deepEquals(this.tokenSecret, other.tokenSecret);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            object,
            externalAccountId,
            providerUserId,
            token,
            provider,
            publicMetadata,
            label,
            scopes,
            tokenSecret);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ResponseBody.class,
                "object", object,
                "externalAccountId", externalAccountId,
                "providerUserId", providerUserId,
                "token", token,
                "provider", provider,
                "publicMetadata", publicMetadata,
                "label", label,
                "scopes", scopes,
                "tokenSecret", tokenSecret);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> object = Optional.empty();
 
        private Optional<? extends String> externalAccountId = Optional.empty();
 
        private Optional<? extends String> providerUserId = Optional.empty();
 
        private Optional<? extends String> token = Optional.empty();
 
        private Optional<? extends String> provider = Optional.empty();
 
        private Optional<? extends GetOAuthAccessTokenPublicMetadata> publicMetadata = Optional.empty();
 
        private JsonNullable<? extends String> label = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<String>> scopes = Optional.empty();
 
        private Optional<? extends String> tokenSecret = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder object(String object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        public Builder object(Optional<? extends String> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        /**
         * External account ID
         */
        public Builder externalAccountId(String externalAccountId) {
            Utils.checkNotNull(externalAccountId, "externalAccountId");
            this.externalAccountId = Optional.ofNullable(externalAccountId);
            return this;
        }

        /**
         * External account ID
         */
        public Builder externalAccountId(Optional<? extends String> externalAccountId) {
            Utils.checkNotNull(externalAccountId, "externalAccountId");
            this.externalAccountId = externalAccountId;
            return this;
        }

        /**
         * The unique ID of the user in the external provider's system
         */
        public Builder providerUserId(String providerUserId) {
            Utils.checkNotNull(providerUserId, "providerUserId");
            this.providerUserId = Optional.ofNullable(providerUserId);
            return this;
        }

        /**
         * The unique ID of the user in the external provider's system
         */
        public Builder providerUserId(Optional<? extends String> providerUserId) {
            Utils.checkNotNull(providerUserId, "providerUserId");
            this.providerUserId = providerUserId;
            return this;
        }

        /**
         * The access token
         */
        public Builder token(String token) {
            Utils.checkNotNull(token, "token");
            this.token = Optional.ofNullable(token);
            return this;
        }

        /**
         * The access token
         */
        public Builder token(Optional<? extends String> token) {
            Utils.checkNotNull(token, "token");
            this.token = token;
            return this;
        }

        /**
         * The ID of the provider
         */
        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = Optional.ofNullable(provider);
            return this;
        }

        /**
         * The ID of the provider
         */
        public Builder provider(Optional<? extends String> provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }

        public Builder publicMetadata(GetOAuthAccessTokenPublicMetadata publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        public Builder publicMetadata(Optional<? extends GetOAuthAccessTokenPublicMetadata> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = JsonNullable.of(label);
            return this;
        }

        public Builder label(JsonNullable<? extends String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        /**
         * The list of scopes that the token is valid for.
         * Only present for OAuth 2.0 tokens.
         */
        public Builder scopes(java.util.List<String> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = Optional.ofNullable(scopes);
            return this;
        }

        /**
         * The list of scopes that the token is valid for.
         * Only present for OAuth 2.0 tokens.
         */
        public Builder scopes(Optional<? extends java.util.List<String>> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }

        /**
         * The token secret. Only present for OAuth 1.0 tokens.
         */
        public Builder tokenSecret(String tokenSecret) {
            Utils.checkNotNull(tokenSecret, "tokenSecret");
            this.tokenSecret = Optional.ofNullable(tokenSecret);
            return this;
        }

        /**
         * The token secret. Only present for OAuth 1.0 tokens.
         */
        public Builder tokenSecret(Optional<? extends String> tokenSecret) {
            Utils.checkNotNull(tokenSecret, "tokenSecret");
            this.tokenSecret = tokenSecret;
            return this;
        }
        
        public ResponseBody build() {
            return new ResponseBody(
                object,
                externalAccountId,
                providerUserId,
                token,
                provider,
                publicMetadata,
                label,
                scopes,
                tokenSecret);
        }
    }
}

