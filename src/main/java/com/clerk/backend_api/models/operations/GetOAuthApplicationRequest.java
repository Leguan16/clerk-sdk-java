/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class GetOAuthApplicationRequest {

    /**
     * The ID of the OAuth application
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=oauth_application_id")
    private String oauthApplicationId;

    @JsonCreator
    public GetOAuthApplicationRequest(
            String oauthApplicationId) {
        Utils.checkNotNull(oauthApplicationId, "oauthApplicationId");
        this.oauthApplicationId = oauthApplicationId;
    }

    /**
     * The ID of the OAuth application
     */
    @JsonIgnore
    public String oauthApplicationId() {
        return oauthApplicationId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the OAuth application
     */
    public GetOAuthApplicationRequest withOauthApplicationId(String oauthApplicationId) {
        Utils.checkNotNull(oauthApplicationId, "oauthApplicationId");
        this.oauthApplicationId = oauthApplicationId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOAuthApplicationRequest other = (GetOAuthApplicationRequest) o;
        return 
            java.util.Objects.deepEquals(this.oauthApplicationId, other.oauthApplicationId);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            oauthApplicationId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetOAuthApplicationRequest.class,
                "oauthApplicationId", oauthApplicationId);
    }
    
    public final static class Builder {
 
        private String oauthApplicationId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the OAuth application
         */
        public Builder oauthApplicationId(String oauthApplicationId) {
            Utils.checkNotNull(oauthApplicationId, "oauthApplicationId");
            this.oauthApplicationId = oauthApplicationId;
            return this;
        }
        
        public GetOAuthApplicationRequest build() {
            return new GetOAuthApplicationRequest(
                oauthApplicationId);
        }
    }
}

