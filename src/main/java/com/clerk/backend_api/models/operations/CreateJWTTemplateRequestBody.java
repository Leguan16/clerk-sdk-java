/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class CreateJWTTemplateRequestBody {

    /**
     * JWT template name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * JWT template claims in JSON format
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("claims")
    private Optional<? extends Claims> claims;

    /**
     * JWT token lifetime
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lifetime")
    private JsonNullable<? extends Double> lifetime;

    /**
     * JWT token allowed clock skew
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("allowed_clock_skew")
    private JsonNullable<? extends Double> allowedClockSkew;

    /**
     * Whether a custom signing key/algorithm is also provided for this template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_signing_key")
    private Optional<? extends Boolean> customSigningKey;

    /**
     * The custom signing algorithm to use when minting JWTs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signing_algorithm")
    private JsonNullable<? extends String> signingAlgorithm;

    /**
     * The custom signing private key to use when minting JWTs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signing_key")
    private JsonNullable<? extends String> signingKey;

    @JsonCreator
    public CreateJWTTemplateRequestBody(
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("claims") Optional<? extends Claims> claims,
            @JsonProperty("lifetime") JsonNullable<? extends Double> lifetime,
            @JsonProperty("allowed_clock_skew") JsonNullable<? extends Double> allowedClockSkew,
            @JsonProperty("custom_signing_key") Optional<? extends Boolean> customSigningKey,
            @JsonProperty("signing_algorithm") JsonNullable<? extends String> signingAlgorithm,
            @JsonProperty("signing_key") JsonNullable<? extends String> signingKey) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(claims, "claims");
        Utils.checkNotNull(lifetime, "lifetime");
        Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
        Utils.checkNotNull(customSigningKey, "customSigningKey");
        Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
        Utils.checkNotNull(signingKey, "signingKey");
        this.name = name;
        this.claims = claims;
        this.lifetime = lifetime;
        this.allowedClockSkew = allowedClockSkew;
        this.customSigningKey = customSigningKey;
        this.signingAlgorithm = signingAlgorithm;
        this.signingKey = signingKey;
    }
    
    public CreateJWTTemplateRequestBody() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * JWT template name
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    /**
     * JWT template claims in JSON format
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Claims> claims() {
        return (Optional<Claims>) claims;
    }

    /**
     * JWT token lifetime
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Double> lifetime() {
        return (JsonNullable<Double>) lifetime;
    }

    /**
     * JWT token allowed clock skew
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Double> allowedClockSkew() {
        return (JsonNullable<Double>) allowedClockSkew;
    }

    /**
     * Whether a custom signing key/algorithm is also provided for this template
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> customSigningKey() {
        return (Optional<Boolean>) customSigningKey;
    }

    /**
     * The custom signing algorithm to use when minting JWTs
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> signingAlgorithm() {
        return (JsonNullable<String>) signingAlgorithm;
    }

    /**
     * The custom signing private key to use when minting JWTs
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> signingKey() {
        return (JsonNullable<String>) signingKey;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * JWT template name
     */
    public CreateJWTTemplateRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * JWT template name
     */
    public CreateJWTTemplateRequestBody withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * JWT template claims in JSON format
     */
    public CreateJWTTemplateRequestBody withClaims(Claims claims) {
        Utils.checkNotNull(claims, "claims");
        this.claims = Optional.ofNullable(claims);
        return this;
    }

    /**
     * JWT template claims in JSON format
     */
    public CreateJWTTemplateRequestBody withClaims(Optional<? extends Claims> claims) {
        Utils.checkNotNull(claims, "claims");
        this.claims = claims;
        return this;
    }

    /**
     * JWT token lifetime
     */
    public CreateJWTTemplateRequestBody withLifetime(double lifetime) {
        Utils.checkNotNull(lifetime, "lifetime");
        this.lifetime = JsonNullable.of(lifetime);
        return this;
    }

    /**
     * JWT token lifetime
     */
    public CreateJWTTemplateRequestBody withLifetime(JsonNullable<? extends Double> lifetime) {
        Utils.checkNotNull(lifetime, "lifetime");
        this.lifetime = lifetime;
        return this;
    }

    /**
     * JWT token allowed clock skew
     */
    public CreateJWTTemplateRequestBody withAllowedClockSkew(double allowedClockSkew) {
        Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
        this.allowedClockSkew = JsonNullable.of(allowedClockSkew);
        return this;
    }

    /**
     * JWT token allowed clock skew
     */
    public CreateJWTTemplateRequestBody withAllowedClockSkew(JsonNullable<? extends Double> allowedClockSkew) {
        Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
        this.allowedClockSkew = allowedClockSkew;
        return this;
    }

    /**
     * Whether a custom signing key/algorithm is also provided for this template
     */
    public CreateJWTTemplateRequestBody withCustomSigningKey(boolean customSigningKey) {
        Utils.checkNotNull(customSigningKey, "customSigningKey");
        this.customSigningKey = Optional.ofNullable(customSigningKey);
        return this;
    }

    /**
     * Whether a custom signing key/algorithm is also provided for this template
     */
    public CreateJWTTemplateRequestBody withCustomSigningKey(Optional<? extends Boolean> customSigningKey) {
        Utils.checkNotNull(customSigningKey, "customSigningKey");
        this.customSigningKey = customSigningKey;
        return this;
    }

    /**
     * The custom signing algorithm to use when minting JWTs
     */
    public CreateJWTTemplateRequestBody withSigningAlgorithm(String signingAlgorithm) {
        Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
        this.signingAlgorithm = JsonNullable.of(signingAlgorithm);
        return this;
    }

    /**
     * The custom signing algorithm to use when minting JWTs
     */
    public CreateJWTTemplateRequestBody withSigningAlgorithm(JsonNullable<? extends String> signingAlgorithm) {
        Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
        this.signingAlgorithm = signingAlgorithm;
        return this;
    }

    /**
     * The custom signing private key to use when minting JWTs
     */
    public CreateJWTTemplateRequestBody withSigningKey(String signingKey) {
        Utils.checkNotNull(signingKey, "signingKey");
        this.signingKey = JsonNullable.of(signingKey);
        return this;
    }

    /**
     * The custom signing private key to use when minting JWTs
     */
    public CreateJWTTemplateRequestBody withSigningKey(JsonNullable<? extends String> signingKey) {
        Utils.checkNotNull(signingKey, "signingKey");
        this.signingKey = signingKey;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateJWTTemplateRequestBody other = (CreateJWTTemplateRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.claims, other.claims) &&
            java.util.Objects.deepEquals(this.lifetime, other.lifetime) &&
            java.util.Objects.deepEquals(this.allowedClockSkew, other.allowedClockSkew) &&
            java.util.Objects.deepEquals(this.customSigningKey, other.customSigningKey) &&
            java.util.Objects.deepEquals(this.signingAlgorithm, other.signingAlgorithm) &&
            java.util.Objects.deepEquals(this.signingKey, other.signingKey);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            claims,
            lifetime,
            allowedClockSkew,
            customSigningKey,
            signingAlgorithm,
            signingKey);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateJWTTemplateRequestBody.class,
                "name", name,
                "claims", claims,
                "lifetime", lifetime,
                "allowedClockSkew", allowedClockSkew,
                "customSigningKey", customSigningKey,
                "signingAlgorithm", signingAlgorithm,
                "signingKey", signingKey);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends Claims> claims = Optional.empty();
 
        private JsonNullable<? extends Double> lifetime = JsonNullable.undefined();
 
        private JsonNullable<? extends Double> allowedClockSkew = JsonNullable.undefined();
 
        private Optional<? extends Boolean> customSigningKey = Optional.empty();
 
        private JsonNullable<? extends String> signingAlgorithm = JsonNullable.undefined();
 
        private JsonNullable<? extends String> signingKey = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * JWT template name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * JWT template name
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * JWT template claims in JSON format
         */
        public Builder claims(Claims claims) {
            Utils.checkNotNull(claims, "claims");
            this.claims = Optional.ofNullable(claims);
            return this;
        }

        /**
         * JWT template claims in JSON format
         */
        public Builder claims(Optional<? extends Claims> claims) {
            Utils.checkNotNull(claims, "claims");
            this.claims = claims;
            return this;
        }

        /**
         * JWT token lifetime
         */
        public Builder lifetime(double lifetime) {
            Utils.checkNotNull(lifetime, "lifetime");
            this.lifetime = JsonNullable.of(lifetime);
            return this;
        }

        /**
         * JWT token lifetime
         */
        public Builder lifetime(JsonNullable<? extends Double> lifetime) {
            Utils.checkNotNull(lifetime, "lifetime");
            this.lifetime = lifetime;
            return this;
        }

        /**
         * JWT token allowed clock skew
         */
        public Builder allowedClockSkew(double allowedClockSkew) {
            Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
            this.allowedClockSkew = JsonNullable.of(allowedClockSkew);
            return this;
        }

        /**
         * JWT token allowed clock skew
         */
        public Builder allowedClockSkew(JsonNullable<? extends Double> allowedClockSkew) {
            Utils.checkNotNull(allowedClockSkew, "allowedClockSkew");
            this.allowedClockSkew = allowedClockSkew;
            return this;
        }

        /**
         * Whether a custom signing key/algorithm is also provided for this template
         */
        public Builder customSigningKey(boolean customSigningKey) {
            Utils.checkNotNull(customSigningKey, "customSigningKey");
            this.customSigningKey = Optional.ofNullable(customSigningKey);
            return this;
        }

        /**
         * Whether a custom signing key/algorithm is also provided for this template
         */
        public Builder customSigningKey(Optional<? extends Boolean> customSigningKey) {
            Utils.checkNotNull(customSigningKey, "customSigningKey");
            this.customSigningKey = customSigningKey;
            return this;
        }

        /**
         * The custom signing algorithm to use when minting JWTs
         */
        public Builder signingAlgorithm(String signingAlgorithm) {
            Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
            this.signingAlgorithm = JsonNullable.of(signingAlgorithm);
            return this;
        }

        /**
         * The custom signing algorithm to use when minting JWTs
         */
        public Builder signingAlgorithm(JsonNullable<? extends String> signingAlgorithm) {
            Utils.checkNotNull(signingAlgorithm, "signingAlgorithm");
            this.signingAlgorithm = signingAlgorithm;
            return this;
        }

        /**
         * The custom signing private key to use when minting JWTs
         */
        public Builder signingKey(String signingKey) {
            Utils.checkNotNull(signingKey, "signingKey");
            this.signingKey = JsonNullable.of(signingKey);
            return this;
        }

        /**
         * The custom signing private key to use when minting JWTs
         */
        public Builder signingKey(JsonNullable<? extends String> signingKey) {
            Utils.checkNotNull(signingKey, "signingKey");
            this.signingKey = signingKey;
            return this;
        }
        
        public CreateJWTTemplateRequestBody build() {
            return new CreateJWTTemplateRequestBody(
                name,
                claims,
                lifetime,
                allowedClockSkew,
                customSigningKey,
                signingAlgorithm,
                signingKey);
        }
    }
}

