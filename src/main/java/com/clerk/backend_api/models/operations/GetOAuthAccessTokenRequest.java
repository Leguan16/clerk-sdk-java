/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;

public class GetOAuthAccessTokenRequest {

    /**
     * The ID of the user for which to retrieve the OAuth access token
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=user_id")
    private String userId;

    /**
     * The ID of the OAuth provider (e.g. `oauth_google`)
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=provider")
    private String provider;

    @JsonCreator
    public GetOAuthAccessTokenRequest(
            String userId,
            String provider) {
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(provider, "provider");
        this.userId = userId;
        this.provider = provider;
    }

    /**
     * The ID of the user for which to retrieve the OAuth access token
     */
    @JsonIgnore
    public String userId() {
        return userId;
    }

    /**
     * The ID of the OAuth provider (e.g. `oauth_google`)
     */
    @JsonIgnore
    public String provider() {
        return provider;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the user for which to retrieve the OAuth access token
     */
    public GetOAuthAccessTokenRequest withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * The ID of the OAuth provider (e.g. `oauth_google`)
     */
    public GetOAuthAccessTokenRequest withProvider(String provider) {
        Utils.checkNotNull(provider, "provider");
        this.provider = provider;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetOAuthAccessTokenRequest other = (GetOAuthAccessTokenRequest) o;
        return 
            java.util.Objects.deepEquals(this.userId, other.userId) &&
            java.util.Objects.deepEquals(this.provider, other.provider);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            userId,
            provider);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetOAuthAccessTokenRequest.class,
                "userId", userId,
                "provider", provider);
    }
    
    public final static class Builder {
 
        private String userId;
 
        private String provider;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the user for which to retrieve the OAuth access token
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * The ID of the OAuth provider (e.g. `oauth_google`)
         */
        public Builder provider(String provider) {
            Utils.checkNotNull(provider, "provider");
            this.provider = provider;
            return this;
        }
        
        public GetOAuthAccessTokenRequest build() {
            return new GetOAuthAccessTokenRequest(
                userId,
                provider);
        }
    }
}

