/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * CreateSessionTokenFromTemplateResponseBody - OK
 */

public class CreateSessionTokenFromTemplateResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends Object> object;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jwt")
    private Optional<? extends String> jwt;

    @JsonCreator
    public CreateSessionTokenFromTemplateResponseBody(
            @JsonProperty("object") Optional<? extends Object> object,
            @JsonProperty("jwt") Optional<? extends String> jwt) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(jwt, "jwt");
        this.object = object;
        this.jwt = jwt;
    }
    
    public CreateSessionTokenFromTemplateResponseBody() {
        this(Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> object() {
        return (Optional<Object>) object;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> jwt() {
        return (Optional<String>) jwt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CreateSessionTokenFromTemplateResponseBody withObject(Object object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    public CreateSessionTokenFromTemplateResponseBody withObject(Optional<? extends Object> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public CreateSessionTokenFromTemplateResponseBody withJwt(String jwt) {
        Utils.checkNotNull(jwt, "jwt");
        this.jwt = Optional.ofNullable(jwt);
        return this;
    }

    public CreateSessionTokenFromTemplateResponseBody withJwt(Optional<? extends String> jwt) {
        Utils.checkNotNull(jwt, "jwt");
        this.jwt = jwt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateSessionTokenFromTemplateResponseBody other = (CreateSessionTokenFromTemplateResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.object, other.object) &&
            java.util.Objects.deepEquals(this.jwt, other.jwt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            object,
            jwt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateSessionTokenFromTemplateResponseBody.class,
                "object", object,
                "jwt", jwt);
    }
    
    public final static class Builder {
 
        private Optional<? extends Object> object = Optional.empty();
 
        private Optional<? extends String> jwt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder object(Object object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        public Builder object(Optional<? extends Object> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder jwt(String jwt) {
            Utils.checkNotNull(jwt, "jwt");
            this.jwt = Optional.ofNullable(jwt);
            return this;
        }

        public Builder jwt(Optional<? extends String> jwt) {
            Utils.checkNotNull(jwt, "jwt");
            this.jwt = jwt;
            return this;
        }
        
        public CreateSessionTokenFromTemplateResponseBody build() {
            return new CreateSessionTokenFromTemplateResponseBody(
                object,
                jwt);
        }
    }
}

