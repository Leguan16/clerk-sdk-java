/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.LazySingletonValue;
import com.clerk.backend_api.utils.SpeakeasyMetadata;
import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class GetUserListRequest {

    /**
     * Returns users with the specified email addresses.
     * Accepts up to 100 email addresses.
     * Any email addresses not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=email_address")
    private Optional<? extends java.util.List<String>> emailAddress;

    /**
     * Returns users with the specified phone numbers.
     * Accepts up to 100 phone numbers.
     * Any phone numbers not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=phone_number")
    private Optional<? extends java.util.List<String>> phoneNumber;

    /**
     * Returns users with the specified external ids.
     * For each external id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective external id should be included or
     * excluded from the result set.
     * Accepts up to 100 external ids.
     * Any external ids not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=external_id")
    private Optional<? extends java.util.List<String>> externalId;

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=username")
    private Optional<? extends java.util.List<String>> username;

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=web3_wallet")
    private Optional<? extends java.util.List<String>> web3Wallet;

    /**
     * Returns users with the user ids specified.
     * For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective user id should be included or
     * excluded from the result set.
     * Accepts up to 100 user ids.
     * Any user ids not found are ignored.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")
    private Optional<? extends java.util.List<String>> userId;

    /**
     * Returns users that have memberships to the
     * given organizations.
     * For each organization id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective organization should be included or
     * excluded from the result set.
     * Accepts up to 100 organization ids.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=organization_id")
    private Optional<? extends java.util.List<String>> organizationId;

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private Optional<? extends String> query;

    /**
     * Returns users that had session activity since the given date, with day precision.
     * Providing a value with higher precision than day will result in an error.
     * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=last_active_at_since")
    private Optional<? extends Long> lastActiveAtSince;

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<? extends Long> limit;

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<? extends Long> offset;

    /**
     * Allows to return users in a particular order.
     * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
     * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
     * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order_by")
    private Optional<? extends String> orderBy;

    @JsonCreator
    public GetUserListRequest(
            Optional<? extends java.util.List<String>> emailAddress,
            Optional<? extends java.util.List<String>> phoneNumber,
            Optional<? extends java.util.List<String>> externalId,
            Optional<? extends java.util.List<String>> username,
            Optional<? extends java.util.List<String>> web3Wallet,
            Optional<? extends java.util.List<String>> userId,
            Optional<? extends java.util.List<String>> organizationId,
            Optional<? extends String> query,
            Optional<? extends Long> lastActiveAtSince,
            Optional<? extends Long> limit,
            Optional<? extends Long> offset,
            Optional<? extends String> orderBy) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(organizationId, "organizationId");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(orderBy, "orderBy");
        this.emailAddress = emailAddress;
        this.phoneNumber = phoneNumber;
        this.externalId = externalId;
        this.username = username;
        this.web3Wallet = web3Wallet;
        this.userId = userId;
        this.organizationId = organizationId;
        this.query = query;
        this.lastActiveAtSince = lastActiveAtSince;
        this.limit = limit;
        this.offset = offset;
        this.orderBy = orderBy;
    }
    
    public GetUserListRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Returns users with the specified email addresses.
     * Accepts up to 100 email addresses.
     * Any email addresses not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> emailAddress() {
        return (Optional<java.util.List<String>>) emailAddress;
    }

    /**
     * Returns users with the specified phone numbers.
     * Accepts up to 100 phone numbers.
     * Any phone numbers not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> phoneNumber() {
        return (Optional<java.util.List<String>>) phoneNumber;
    }

    /**
     * Returns users with the specified external ids.
     * For each external id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective external id should be included or
     * excluded from the result set.
     * Accepts up to 100 external ids.
     * Any external ids not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> externalId() {
        return (Optional<java.util.List<String>>) externalId;
    }

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> username() {
        return (Optional<java.util.List<String>>) username;
    }

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> web3Wallet() {
        return (Optional<java.util.List<String>>) web3Wallet;
    }

    /**
     * Returns users with the user ids specified.
     * For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective user id should be included or
     * excluded from the result set.
     * Accepts up to 100 user ids.
     * Any user ids not found are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> userId() {
        return (Optional<java.util.List<String>>) userId;
    }

    /**
     * Returns users that have memberships to the
     * given organizations.
     * For each organization id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective organization should be included or
     * excluded from the result set.
     * Accepts up to 100 organization ids.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> organizationId() {
        return (Optional<java.util.List<String>>) organizationId;
    }

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> query() {
        return (Optional<String>) query;
    }

    /**
     * Returns users that had session activity since the given date, with day precision.
     * Providing a value with higher precision than day will result in an error.
     * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> lastActiveAtSince() {
        return (Optional<Long>) lastActiveAtSince;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> limit() {
        return (Optional<Long>) limit;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> offset() {
        return (Optional<Long>) offset;
    }

    /**
     * Allows to return users in a particular order.
     * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
     * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
     * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> orderBy() {
        return (Optional<String>) orderBy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Returns users with the specified email addresses.
     * Accepts up to 100 email addresses.
     * Any email addresses not found are ignored.
     */
    public GetUserListRequest withEmailAddress(java.util.List<String> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = Optional.ofNullable(emailAddress);
        return this;
    }

    /**
     * Returns users with the specified email addresses.
     * Accepts up to 100 email addresses.
     * Any email addresses not found are ignored.
     */
    public GetUserListRequest withEmailAddress(Optional<? extends java.util.List<String>> emailAddress) {
        Utils.checkNotNull(emailAddress, "emailAddress");
        this.emailAddress = emailAddress;
        return this;
    }

    /**
     * Returns users with the specified phone numbers.
     * Accepts up to 100 phone numbers.
     * Any phone numbers not found are ignored.
     */
    public GetUserListRequest withPhoneNumber(java.util.List<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * Returns users with the specified phone numbers.
     * Accepts up to 100 phone numbers.
     * Any phone numbers not found are ignored.
     */
    public GetUserListRequest withPhoneNumber(Optional<? extends java.util.List<String>> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    /**
     * Returns users with the specified external ids.
     * For each external id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective external id should be included or
     * excluded from the result set.
     * Accepts up to 100 external ids.
     * Any external ids not found are ignored.
     */
    public GetUserListRequest withExternalId(java.util.List<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }

    /**
     * Returns users with the specified external ids.
     * For each external id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective external id should be included or
     * excluded from the result set.
     * Accepts up to 100 external ids.
     * Any external ids not found are ignored.
     */
    public GetUserListRequest withExternalId(Optional<? extends java.util.List<String>> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    public GetUserListRequest withUsername(java.util.List<String> username) {
        Utils.checkNotNull(username, "username");
        this.username = Optional.ofNullable(username);
        return this;
    }

    /**
     * Returns users with the specified usernames.
     * Accepts up to 100 usernames.
     * Any usernames not found are ignored.
     */
    public GetUserListRequest withUsername(Optional<? extends java.util.List<String>> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    public GetUserListRequest withWeb3Wallet(java.util.List<String> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = Optional.ofNullable(web3Wallet);
        return this;
    }

    /**
     * Returns users with the specified web3 wallet addresses.
     * Accepts up to 100 web3 wallet addresses.
     * Any web3 wallet addressed not found are ignored.
     */
    public GetUserListRequest withWeb3Wallet(Optional<? extends java.util.List<String>> web3Wallet) {
        Utils.checkNotNull(web3Wallet, "web3Wallet");
        this.web3Wallet = web3Wallet;
        return this;
    }

    /**
     * Returns users with the user ids specified.
     * For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective user id should be included or
     * excluded from the result set.
     * Accepts up to 100 user ids.
     * Any user ids not found are ignored.
     */
    public GetUserListRequest withUserId(java.util.List<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    /**
     * Returns users with the user ids specified.
     * For each user id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective user id should be included or
     * excluded from the result set.
     * Accepts up to 100 user ids.
     * Any user ids not found are ignored.
     */
    public GetUserListRequest withUserId(Optional<? extends java.util.List<String>> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    /**
     * Returns users that have memberships to the
     * given organizations.
     * For each organization id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective organization should be included or
     * excluded from the result set.
     * Accepts up to 100 organization ids.
     */
    public GetUserListRequest withOrganizationId(java.util.List<String> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = Optional.ofNullable(organizationId);
        return this;
    }

    /**
     * Returns users that have memberships to the
     * given organizations.
     * For each organization id, the `+` and `-` can be
     * prepended to the id, which denote whether the
     * respective organization should be included or
     * excluded from the result set.
     * Accepts up to 100 organization ids.
     */
    public GetUserListRequest withOrganizationId(Optional<? extends java.util.List<String>> organizationId) {
        Utils.checkNotNull(organizationId, "organizationId");
        this.organizationId = organizationId;
        return this;
    }

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    public GetUserListRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    /**
     * Returns users that match the given query.
     * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
     * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
     */
    public GetUserListRequest withQuery(Optional<? extends String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Returns users that had session activity since the given date, with day precision.
     * Providing a value with higher precision than day will result in an error.
     * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
     */
    public GetUserListRequest withLastActiveAtSince(long lastActiveAtSince) {
        Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
        this.lastActiveAtSince = Optional.ofNullable(lastActiveAtSince);
        return this;
    }

    /**
     * Returns users that had session activity since the given date, with day precision.
     * Providing a value with higher precision than day will result in an error.
     * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
     */
    public GetUserListRequest withLastActiveAtSince(Optional<? extends Long> lastActiveAtSince) {
        Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
        this.lastActiveAtSince = lastActiveAtSince;
        return this;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    public GetUserListRequest withLimit(long limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Applies a limit to the number of results returned.
     * Can be used for paginating the results together with `offset`.
     */
    public GetUserListRequest withLimit(Optional<? extends Long> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    public GetUserListRequest withOffset(long offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    /**
     * Skip the first `offset` results when paginating.
     * Needs to be an integer greater or equal to zero.
     * To be used in conjunction with `limit`.
     */
    public GetUserListRequest withOffset(Optional<? extends Long> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    /**
     * Allows to return users in a particular order.
     * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
     * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
     * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
     */
    public GetUserListRequest withOrderBy(String orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = Optional.ofNullable(orderBy);
        return this;
    }

    /**
     * Allows to return users in a particular order.
     * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
     * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
     * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
     * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
     * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
     */
    public GetUserListRequest withOrderBy(Optional<? extends String> orderBy) {
        Utils.checkNotNull(orderBy, "orderBy");
        this.orderBy = orderBy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetUserListRequest other = (GetUserListRequest) o;
        return 
            java.util.Objects.deepEquals(this.emailAddress, other.emailAddress) &&
            java.util.Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            java.util.Objects.deepEquals(this.externalId, other.externalId) &&
            java.util.Objects.deepEquals(this.username, other.username) &&
            java.util.Objects.deepEquals(this.web3Wallet, other.web3Wallet) &&
            java.util.Objects.deepEquals(this.userId, other.userId) &&
            java.util.Objects.deepEquals(this.organizationId, other.organizationId) &&
            java.util.Objects.deepEquals(this.query, other.query) &&
            java.util.Objects.deepEquals(this.lastActiveAtSince, other.lastActiveAtSince) &&
            java.util.Objects.deepEquals(this.limit, other.limit) &&
            java.util.Objects.deepEquals(this.offset, other.offset) &&
            java.util.Objects.deepEquals(this.orderBy, other.orderBy);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            emailAddress,
            phoneNumber,
            externalId,
            username,
            web3Wallet,
            userId,
            organizationId,
            query,
            lastActiveAtSince,
            limit,
            offset,
            orderBy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetUserListRequest.class,
                "emailAddress", emailAddress,
                "phoneNumber", phoneNumber,
                "externalId", externalId,
                "username", username,
                "web3Wallet", web3Wallet,
                "userId", userId,
                "organizationId", organizationId,
                "query", query,
                "lastActiveAtSince", lastActiveAtSince,
                "limit", limit,
                "offset", offset,
                "orderBy", orderBy);
    }
    
    public final static class Builder {
 
        private Optional<? extends java.util.List<String>> emailAddress = Optional.empty();
 
        private Optional<? extends java.util.List<String>> phoneNumber = Optional.empty();
 
        private Optional<? extends java.util.List<String>> externalId = Optional.empty();
 
        private Optional<? extends java.util.List<String>> username = Optional.empty();
 
        private Optional<? extends java.util.List<String>> web3Wallet = Optional.empty();
 
        private Optional<? extends java.util.List<String>> userId = Optional.empty();
 
        private Optional<? extends java.util.List<String>> organizationId = Optional.empty();
 
        private Optional<? extends String> query = Optional.empty();
 
        private Optional<? extends Long> lastActiveAtSince = Optional.empty();
 
        private Optional<? extends Long> limit;
 
        private Optional<? extends Long> offset;
 
        private Optional<? extends String> orderBy;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Returns users with the specified email addresses.
         * Accepts up to 100 email addresses.
         * Any email addresses not found are ignored.
         */
        public Builder emailAddress(java.util.List<String> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = Optional.ofNullable(emailAddress);
            return this;
        }

        /**
         * Returns users with the specified email addresses.
         * Accepts up to 100 email addresses.
         * Any email addresses not found are ignored.
         */
        public Builder emailAddress(Optional<? extends java.util.List<String>> emailAddress) {
            Utils.checkNotNull(emailAddress, "emailAddress");
            this.emailAddress = emailAddress;
            return this;
        }

        /**
         * Returns users with the specified phone numbers.
         * Accepts up to 100 phone numbers.
         * Any phone numbers not found are ignored.
         */
        public Builder phoneNumber(java.util.List<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * Returns users with the specified phone numbers.
         * Accepts up to 100 phone numbers.
         * Any phone numbers not found are ignored.
         */
        public Builder phoneNumber(Optional<? extends java.util.List<String>> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        /**
         * Returns users with the specified external ids.
         * For each external id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective external id should be included or
         * excluded from the result set.
         * Accepts up to 100 external ids.
         * Any external ids not found are ignored.
         */
        public Builder externalId(java.util.List<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        /**
         * Returns users with the specified external ids.
         * For each external id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective external id should be included or
         * excluded from the result set.
         * Accepts up to 100 external ids.
         * Any external ids not found are ignored.
         */
        public Builder externalId(Optional<? extends java.util.List<String>> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        /**
         * Returns users with the specified usernames.
         * Accepts up to 100 usernames.
         * Any usernames not found are ignored.
         */
        public Builder username(java.util.List<String> username) {
            Utils.checkNotNull(username, "username");
            this.username = Optional.ofNullable(username);
            return this;
        }

        /**
         * Returns users with the specified usernames.
         * Accepts up to 100 usernames.
         * Any usernames not found are ignored.
         */
        public Builder username(Optional<? extends java.util.List<String>> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        /**
         * Returns users with the specified web3 wallet addresses.
         * Accepts up to 100 web3 wallet addresses.
         * Any web3 wallet addressed not found are ignored.
         */
        public Builder web3Wallet(java.util.List<String> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = Optional.ofNullable(web3Wallet);
            return this;
        }

        /**
         * Returns users with the specified web3 wallet addresses.
         * Accepts up to 100 web3 wallet addresses.
         * Any web3 wallet addressed not found are ignored.
         */
        public Builder web3Wallet(Optional<? extends java.util.List<String>> web3Wallet) {
            Utils.checkNotNull(web3Wallet, "web3Wallet");
            this.web3Wallet = web3Wallet;
            return this;
        }

        /**
         * Returns users with the user ids specified.
         * For each user id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective user id should be included or
         * excluded from the result set.
         * Accepts up to 100 user ids.
         * Any user ids not found are ignored.
         */
        public Builder userId(java.util.List<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * Returns users with the user ids specified.
         * For each user id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective user id should be included or
         * excluded from the result set.
         * Accepts up to 100 user ids.
         * Any user ids not found are ignored.
         */
        public Builder userId(Optional<? extends java.util.List<String>> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        /**
         * Returns users that have memberships to the
         * given organizations.
         * For each organization id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective organization should be included or
         * excluded from the result set.
         * Accepts up to 100 organization ids.
         */
        public Builder organizationId(java.util.List<String> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = Optional.ofNullable(organizationId);
            return this;
        }

        /**
         * Returns users that have memberships to the
         * given organizations.
         * For each organization id, the `+` and `-` can be
         * prepended to the id, which denote whether the
         * respective organization should be included or
         * excluded from the result set.
         * Accepts up to 100 organization ids.
         */
        public Builder organizationId(Optional<? extends java.util.List<String>> organizationId) {
            Utils.checkNotNull(organizationId, "organizationId");
            this.organizationId = organizationId;
            return this;
        }

        /**
         * Returns users that match the given query.
         * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
         * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Returns users that match the given query.
         * For possible matches, we check the email addresses, phone numbers, usernames, web3 wallets, user ids, first and last names.
         * The query value doesn't need to match the exact value you are looking for, it is capable of partial matches as well.
         */
        public Builder query(Optional<? extends String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }

        /**
         * Returns users that had session activity since the given date, with day precision.
         * Providing a value with higher precision than day will result in an error.
         * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
         */
        public Builder lastActiveAtSince(long lastActiveAtSince) {
            Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
            this.lastActiveAtSince = Optional.ofNullable(lastActiveAtSince);
            return this;
        }

        /**
         * Returns users that had session activity since the given date, with day precision.
         * Providing a value with higher precision than day will result in an error.
         * Example: use 1700690400000 to retrieve users that had session activity from 2023-11-23 until the current day.
         */
        public Builder lastActiveAtSince(Optional<? extends Long> lastActiveAtSince) {
            Utils.checkNotNull(lastActiveAtSince, "lastActiveAtSince");
            this.lastActiveAtSince = lastActiveAtSince;
            return this;
        }

        /**
         * Applies a limit to the number of results returned.
         * Can be used for paginating the results together with `offset`.
         */
        public Builder limit(long limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Applies a limit to the number of results returned.
         * Can be used for paginating the results together with `offset`.
         */
        public Builder limit(Optional<? extends Long> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * Skip the first `offset` results when paginating.
         * Needs to be an integer greater or equal to zero.
         * To be used in conjunction with `limit`.
         */
        public Builder offset(long offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        /**
         * Skip the first `offset` results when paginating.
         * Needs to be an integer greater or equal to zero.
         * To be used in conjunction with `limit`.
         */
        public Builder offset(Optional<? extends Long> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }

        /**
         * Allows to return users in a particular order.
         * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
         * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
         * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
         * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
         * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
         */
        public Builder orderBy(String orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = Optional.ofNullable(orderBy);
            return this;
        }

        /**
         * Allows to return users in a particular order.
         * At the moment, you can order the returned users by their `created_at`,`updated_at`,`email_address`,`web3wallet`,`first_name`,`last_name`,`phone_number`,`username`,`last_active_at`,`last_sign_in_at`.
         * In order to specify the direction, you can use the `+/-` symbols prepended in the property to order by.
         * For example, if you want users to be returned in descending order according to their `created_at` property, you can use `-created_at`.
         * If you don't use `+` or `-`, then `+` is implied. We only support one `order_by` parameter, and if multiple `order_by` parameters are provided, we will only keep the first one. For example,
         * if you pass `order_by=username&amp;order_by=created_at`, we will consider only the first `order_by` parameter, which is `username`. The `created_at` parameter will be ignored in this case.
         */
        public Builder orderBy(Optional<? extends String> orderBy) {
            Utils.checkNotNull(orderBy, "orderBy");
            this.orderBy = orderBy;
            return this;
        }
        
        public GetUserListRequest build() {
            if (limit == null) {
                limit = _SINGLETON_VALUE_Limit.value();
            }
            if (offset == null) {
                offset = _SINGLETON_VALUE_Offset.value();
            }
            if (orderBy == null) {
                orderBy = _SINGLETON_VALUE_OrderBy.value();
            }
            return new GetUserListRequest(
                emailAddress,
                phoneNumber,
                externalId,
                username,
                web3Wallet,
                userId,
                organizationId,
                query,
                lastActiveAtSince,
                limit,
                offset,
                orderBy);
        }

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_Limit =
                new LazySingletonValue<>(
                        "limit",
                        "10",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends Long>> _SINGLETON_VALUE_Offset =
                new LazySingletonValue<>(
                        "offset",
                        "0",
                        new TypeReference<Optional<? extends Long>>() {});

        private static final LazySingletonValue<Optional<? extends String>> _SINGLETON_VALUE_OrderBy =
                new LazySingletonValue<>(
                        "order_by",
                        "\"-created_at\"",
                        new TypeReference<Optional<? extends String>>() {});
    }
}

