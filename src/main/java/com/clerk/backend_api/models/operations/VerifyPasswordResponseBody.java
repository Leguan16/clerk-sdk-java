/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
/**
 * VerifyPasswordResponseBody - The provided password was correct.
 */

public class VerifyPasswordResponseBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verified")
    private Optional<? extends Boolean> verified;

    @JsonCreator
    public VerifyPasswordResponseBody(
            @JsonProperty("verified") Optional<? extends Boolean> verified) {
        Utils.checkNotNull(verified, "verified");
        this.verified = verified;
    }
    
    public VerifyPasswordResponseBody() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> verified() {
        return (Optional<Boolean>) verified;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public VerifyPasswordResponseBody withVerified(boolean verified) {
        Utils.checkNotNull(verified, "verified");
        this.verified = Optional.ofNullable(verified);
        return this;
    }

    public VerifyPasswordResponseBody withVerified(Optional<? extends Boolean> verified) {
        Utils.checkNotNull(verified, "verified");
        this.verified = verified;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerifyPasswordResponseBody other = (VerifyPasswordResponseBody) o;
        return 
            java.util.Objects.deepEquals(this.verified, other.verified);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            verified);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerifyPasswordResponseBody.class,
                "verified", verified);
    }
    
    public final static class Builder {
 
        private Optional<? extends Boolean> verified = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder verified(boolean verified) {
            Utils.checkNotNull(verified, "verified");
            this.verified = Optional.ofNullable(verified);
            return this;
        }

        public Builder verified(Optional<? extends Boolean> verified) {
            Utils.checkNotNull(verified, "verified");
            this.verified = verified;
            return this;
        }
        
        public VerifyPasswordResponseBody build() {
            return new VerifyPasswordResponseBody(
                verified);
        }
    }
}

