/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class VerifyDomainProxyRequestBody {

    /**
     * The ID of the domain that will be updated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain_id")
    private Optional<? extends String> domainId;

    /**
     * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. e.g. https://example.com/__clerk
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxy_url")
    private Optional<? extends String> proxyUrl;

    @JsonCreator
    public VerifyDomainProxyRequestBody(
            @JsonProperty("domain_id") Optional<? extends String> domainId,
            @JsonProperty("proxy_url") Optional<? extends String> proxyUrl) {
        Utils.checkNotNull(domainId, "domainId");
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.domainId = domainId;
        this.proxyUrl = proxyUrl;
    }
    
    public VerifyDomainProxyRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the domain that will be updated.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> domainId() {
        return (Optional<String>) domainId;
    }

    /**
     * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. e.g. https://example.com/__clerk
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> proxyUrl() {
        return (Optional<String>) proxyUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the domain that will be updated.
     */
    public VerifyDomainProxyRequestBody withDomainId(String domainId) {
        Utils.checkNotNull(domainId, "domainId");
        this.domainId = Optional.ofNullable(domainId);
        return this;
    }

    /**
     * The ID of the domain that will be updated.
     */
    public VerifyDomainProxyRequestBody withDomainId(Optional<? extends String> domainId) {
        Utils.checkNotNull(domainId, "domainId");
        this.domainId = domainId;
        return this;
    }

    /**
     * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. e.g. https://example.com/__clerk
     */
    public VerifyDomainProxyRequestBody withProxyUrl(String proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = Optional.ofNullable(proxyUrl);
        return this;
    }

    /**
     * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. e.g. https://example.com/__clerk
     */
    public VerifyDomainProxyRequestBody withProxyUrl(Optional<? extends String> proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = proxyUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerifyDomainProxyRequestBody other = (VerifyDomainProxyRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.domainId, other.domainId) &&
            java.util.Objects.deepEquals(this.proxyUrl, other.proxyUrl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            domainId,
            proxyUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerifyDomainProxyRequestBody.class,
                "domainId", domainId,
                "proxyUrl", proxyUrl);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> domainId = Optional.empty();
 
        private Optional<? extends String> proxyUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the domain that will be updated.
         */
        public Builder domainId(String domainId) {
            Utils.checkNotNull(domainId, "domainId");
            this.domainId = Optional.ofNullable(domainId);
            return this;
        }

        /**
         * The ID of the domain that will be updated.
         */
        public Builder domainId(Optional<? extends String> domainId) {
            Utils.checkNotNull(domainId, "domainId");
            this.domainId = domainId;
            return this;
        }

        /**
         * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. e.g. https://example.com/__clerk
         */
        public Builder proxyUrl(String proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = Optional.ofNullable(proxyUrl);
            return this;
        }

        /**
         * The full URL of the proxy which will forward requests to the Clerk Frontend API for this domain. e.g. https://example.com/__clerk
         */
        public Builder proxyUrl(Optional<? extends String> proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = proxyUrl;
            return this;
        }
        
        public VerifyDomainProxyRequestBody build() {
            return new VerifyDomainProxyRequestBody(
                domainId,
                proxyUrl);
        }
    }
}

