/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.operations;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapitools.jackson.nullable.JsonNullable;

public class UpdateDomainRequestBody {

    /**
     * The new domain name. For development instances, can contain the port,
     * i.e `myhostname:3000`. For production instances, must be a valid FQDN,
     * i.e `mysite.com`. Cannot contain protocol scheme.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private JsonNullable<? extends String> name;

    /**
     * The full URL of the proxy that will forward requests to Clerk's Frontend API.
     * Can only be updated for production instances.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxy_url")
    private JsonNullable<? extends String> proxyUrl;

    @JsonCreator
    public UpdateDomainRequestBody(
            @JsonProperty("name") JsonNullable<? extends String> name,
            @JsonProperty("proxy_url") JsonNullable<? extends String> proxyUrl) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.name = name;
        this.proxyUrl = proxyUrl;
    }
    
    public UpdateDomainRequestBody() {
        this(JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The new domain name. For development instances, can contain the port,
     * i.e `myhostname:3000`. For production instances, must be a valid FQDN,
     * i.e `mysite.com`. Cannot contain protocol scheme.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> name() {
        return (JsonNullable<String>) name;
    }

    /**
     * The full URL of the proxy that will forward requests to Clerk's Frontend API.
     * Can only be updated for production instances.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> proxyUrl() {
        return (JsonNullable<String>) proxyUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The new domain name. For development instances, can contain the port,
     * i.e `myhostname:3000`. For production instances, must be a valid FQDN,
     * i.e `mysite.com`. Cannot contain protocol scheme.
     */
    public UpdateDomainRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = JsonNullable.of(name);
        return this;
    }

    /**
     * The new domain name. For development instances, can contain the port,
     * i.e `myhostname:3000`. For production instances, must be a valid FQDN,
     * i.e `mysite.com`. Cannot contain protocol scheme.
     */
    public UpdateDomainRequestBody withName(JsonNullable<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The full URL of the proxy that will forward requests to Clerk's Frontend API.
     * Can only be updated for production instances.
     */
    public UpdateDomainRequestBody withProxyUrl(String proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = JsonNullable.of(proxyUrl);
        return this;
    }

    /**
     * The full URL of the proxy that will forward requests to Clerk's Frontend API.
     * Can only be updated for production instances.
     */
    public UpdateDomainRequestBody withProxyUrl(JsonNullable<? extends String> proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = proxyUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateDomainRequestBody other = (UpdateDomainRequestBody) o;
        return 
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.proxyUrl, other.proxyUrl);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            name,
            proxyUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateDomainRequestBody.class,
                "name", name,
                "proxyUrl", proxyUrl);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends String> name = JsonNullable.undefined();
 
        private JsonNullable<? extends String> proxyUrl = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The new domain name. For development instances, can contain the port,
         * i.e `myhostname:3000`. For production instances, must be a valid FQDN,
         * i.e `mysite.com`. Cannot contain protocol scheme.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = JsonNullable.of(name);
            return this;
        }

        /**
         * The new domain name. For development instances, can contain the port,
         * i.e `myhostname:3000`. For production instances, must be a valid FQDN,
         * i.e `mysite.com`. Cannot contain protocol scheme.
         */
        public Builder name(JsonNullable<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The full URL of the proxy that will forward requests to Clerk's Frontend API.
         * Can only be updated for production instances.
         */
        public Builder proxyUrl(String proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = JsonNullable.of(proxyUrl);
            return this;
        }

        /**
         * The full URL of the proxy that will forward requests to Clerk's Frontend API.
         * Can only be updated for production instances.
         */
        public Builder proxyUrl(JsonNullable<? extends String> proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = proxyUrl;
            return this;
        }
        
        public UpdateDomainRequestBody build() {
            return new UpdateDomainRequestBody(
                name,
                proxyUrl);
        }
    }
}

