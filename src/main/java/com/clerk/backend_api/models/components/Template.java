/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Template {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends TemplateObject> object;

    /**
     * the id of the instance the template belongs to
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instance_id")
    private JsonNullable<? extends String> instanceId;

    /**
     * whether this is a system (default) or user overridden) template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_type")
    private Optional<? extends String> resourceType;

    /**
     * whether this is an email or SMS template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("template_type")
    private Optional<? extends String> templateType;

    /**
     * user-friendly name of the template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends String> name;

    /**
     * machine-friendly name of the template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private Optional<? extends String> slug;

    /**
     * position with the listing of templates
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    private Optional<? extends Long> position;

    /**
     * whether this template can be reverted to the corresponding system default
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_revert")
    private Optional<? extends Boolean> canRevert;

    /**
     * whether this template can be deleted
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_delete")
    private Optional<? extends Boolean> canDelete;

    /**
     * whether this template can be disabled, true only for notification SMS templates
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("can_disable")
    private Optional<? extends Boolean> canDisable;

    /**
     * email subject
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private JsonNullable<? extends String> subject;

    /**
     * the editor markup used to generate the body of the template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("markup")
    private Optional<? extends String> markup;

    /**
     * the template body before variable interpolation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private Optional<? extends String> body;

    /**
     * list of variables that are available for use in the template body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("available_variables")
    private Optional<? extends java.util.List<String>> availableVariables;

    /**
     * list of variables that must be contained in the template body
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required_variables")
    private Optional<? extends java.util.List<String>> requiredVariables;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_email_name")
    private Optional<? extends String> fromEmailName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reply_to_email_name")
    private Optional<? extends String> replyToEmailName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delivered_by_clerk")
    private Optional<? extends Boolean> deliveredByClerk;

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<? extends Long> updatedAt;

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<? extends Long> createdAt;

    @JsonCreator
    public Template(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("object") Optional<? extends TemplateObject> object,
            @JsonProperty("instance_id") JsonNullable<? extends String> instanceId,
            @JsonProperty("resource_type") Optional<? extends String> resourceType,
            @JsonProperty("template_type") Optional<? extends String> templateType,
            @JsonProperty("name") Optional<? extends String> name,
            @JsonProperty("slug") Optional<? extends String> slug,
            @JsonProperty("position") Optional<? extends Long> position,
            @JsonProperty("can_revert") Optional<? extends Boolean> canRevert,
            @JsonProperty("can_delete") Optional<? extends Boolean> canDelete,
            @JsonProperty("can_disable") Optional<? extends Boolean> canDisable,
            @JsonProperty("subject") JsonNullable<? extends String> subject,
            @JsonProperty("markup") Optional<? extends String> markup,
            @JsonProperty("body") Optional<? extends String> body,
            @JsonProperty("available_variables") Optional<? extends java.util.List<String>> availableVariables,
            @JsonProperty("required_variables") Optional<? extends java.util.List<String>> requiredVariables,
            @JsonProperty("from_email_name") Optional<? extends String> fromEmailName,
            @JsonProperty("reply_to_email_name") Optional<? extends String> replyToEmailName,
            @JsonProperty("delivered_by_clerk") Optional<? extends Boolean> deliveredByClerk,
            @JsonProperty("updated_at") Optional<? extends Long> updatedAt,
            @JsonProperty("created_at") Optional<? extends Long> createdAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(instanceId, "instanceId");
        Utils.checkNotNull(resourceType, "resourceType");
        Utils.checkNotNull(templateType, "templateType");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(position, "position");
        Utils.checkNotNull(canRevert, "canRevert");
        Utils.checkNotNull(canDelete, "canDelete");
        Utils.checkNotNull(canDisable, "canDisable");
        Utils.checkNotNull(subject, "subject");
        Utils.checkNotNull(markup, "markup");
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(availableVariables, "availableVariables");
        Utils.checkNotNull(requiredVariables, "requiredVariables");
        Utils.checkNotNull(fromEmailName, "fromEmailName");
        Utils.checkNotNull(replyToEmailName, "replyToEmailName");
        Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        this.id = id;
        this.object = object;
        this.instanceId = instanceId;
        this.resourceType = resourceType;
        this.templateType = templateType;
        this.name = name;
        this.slug = slug;
        this.position = position;
        this.canRevert = canRevert;
        this.canDelete = canDelete;
        this.canDisable = canDisable;
        this.subject = subject;
        this.markup = markup;
        this.body = body;
        this.availableVariables = availableVariables;
        this.requiredVariables = requiredVariables;
        this.fromEmailName = fromEmailName;
        this.replyToEmailName = replyToEmailName;
        this.deliveredByClerk = deliveredByClerk;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
    }
    
    public Template() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TemplateObject> object() {
        return (Optional<TemplateObject>) object;
    }

    /**
     * the id of the instance the template belongs to
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> instanceId() {
        return (JsonNullable<String>) instanceId;
    }

    /**
     * whether this is a system (default) or user overridden) template
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> resourceType() {
        return (Optional<String>) resourceType;
    }

    /**
     * whether this is an email or SMS template
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> templateType() {
        return (Optional<String>) templateType;
    }

    /**
     * user-friendly name of the template
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> name() {
        return (Optional<String>) name;
    }

    /**
     * machine-friendly name of the template
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> slug() {
        return (Optional<String>) slug;
    }

    /**
     * position with the listing of templates
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> position() {
        return (Optional<Long>) position;
    }

    /**
     * whether this template can be reverted to the corresponding system default
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> canRevert() {
        return (Optional<Boolean>) canRevert;
    }

    /**
     * whether this template can be deleted
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> canDelete() {
        return (Optional<Boolean>) canDelete;
    }

    /**
     * whether this template can be disabled, true only for notification SMS templates
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> canDisable() {
        return (Optional<Boolean>) canDisable;
    }

    /**
     * email subject
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> subject() {
        return (JsonNullable<String>) subject;
    }

    /**
     * the editor markup used to generate the body of the template
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> markup() {
        return (Optional<String>) markup;
    }

    /**
     * the template body before variable interpolation
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> body() {
        return (Optional<String>) body;
    }

    /**
     * list of variables that are available for use in the template body
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> availableVariables() {
        return (Optional<java.util.List<String>>) availableVariables;
    }

    /**
     * list of variables that must be contained in the template body
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<String>> requiredVariables() {
        return (Optional<java.util.List<String>>) requiredVariables;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> fromEmailName() {
        return (Optional<String>) fromEmailName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> replyToEmailName() {
        return (Optional<String>) replyToEmailName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> deliveredByClerk() {
        return (Optional<Boolean>) deliveredByClerk;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return (Optional<Long>) updatedAt;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> createdAt() {
        return (Optional<Long>) createdAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Template withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Template withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public Template withObject(TemplateObject object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public Template withObject(Optional<? extends TemplateObject> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    /**
     * the id of the instance the template belongs to
     */
    public Template withInstanceId(String instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = JsonNullable.of(instanceId);
        return this;
    }

    /**
     * the id of the instance the template belongs to
     */
    public Template withInstanceId(JsonNullable<? extends String> instanceId) {
        Utils.checkNotNull(instanceId, "instanceId");
        this.instanceId = instanceId;
        return this;
    }

    /**
     * whether this is a system (default) or user overridden) template
     */
    public Template withResourceType(String resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = Optional.ofNullable(resourceType);
        return this;
    }

    /**
     * whether this is a system (default) or user overridden) template
     */
    public Template withResourceType(Optional<? extends String> resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = resourceType;
        return this;
    }

    /**
     * whether this is an email or SMS template
     */
    public Template withTemplateType(String templateType) {
        Utils.checkNotNull(templateType, "templateType");
        this.templateType = Optional.ofNullable(templateType);
        return this;
    }

    /**
     * whether this is an email or SMS template
     */
    public Template withTemplateType(Optional<? extends String> templateType) {
        Utils.checkNotNull(templateType, "templateType");
        this.templateType = templateType;
        return this;
    }

    /**
     * user-friendly name of the template
     */
    public Template withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * user-friendly name of the template
     */
    public Template withName(Optional<? extends String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * machine-friendly name of the template
     */
    public Template withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = Optional.ofNullable(slug);
        return this;
    }

    /**
     * machine-friendly name of the template
     */
    public Template withSlug(Optional<? extends String> slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * position with the listing of templates
     */
    public Template withPosition(long position) {
        Utils.checkNotNull(position, "position");
        this.position = Optional.ofNullable(position);
        return this;
    }

    /**
     * position with the listing of templates
     */
    public Template withPosition(Optional<? extends Long> position) {
        Utils.checkNotNull(position, "position");
        this.position = position;
        return this;
    }

    /**
     * whether this template can be reverted to the corresponding system default
     */
    public Template withCanRevert(boolean canRevert) {
        Utils.checkNotNull(canRevert, "canRevert");
        this.canRevert = Optional.ofNullable(canRevert);
        return this;
    }

    /**
     * whether this template can be reverted to the corresponding system default
     */
    public Template withCanRevert(Optional<? extends Boolean> canRevert) {
        Utils.checkNotNull(canRevert, "canRevert");
        this.canRevert = canRevert;
        return this;
    }

    /**
     * whether this template can be deleted
     */
    public Template withCanDelete(boolean canDelete) {
        Utils.checkNotNull(canDelete, "canDelete");
        this.canDelete = Optional.ofNullable(canDelete);
        return this;
    }

    /**
     * whether this template can be deleted
     */
    public Template withCanDelete(Optional<? extends Boolean> canDelete) {
        Utils.checkNotNull(canDelete, "canDelete");
        this.canDelete = canDelete;
        return this;
    }

    /**
     * whether this template can be disabled, true only for notification SMS templates
     */
    public Template withCanDisable(boolean canDisable) {
        Utils.checkNotNull(canDisable, "canDisable");
        this.canDisable = Optional.ofNullable(canDisable);
        return this;
    }

    /**
     * whether this template can be disabled, true only for notification SMS templates
     */
    public Template withCanDisable(Optional<? extends Boolean> canDisable) {
        Utils.checkNotNull(canDisable, "canDisable");
        this.canDisable = canDisable;
        return this;
    }

    /**
     * email subject
     */
    public Template withSubject(String subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = JsonNullable.of(subject);
        return this;
    }

    /**
     * email subject
     */
    public Template withSubject(JsonNullable<? extends String> subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = subject;
        return this;
    }

    /**
     * the editor markup used to generate the body of the template
     */
    public Template withMarkup(String markup) {
        Utils.checkNotNull(markup, "markup");
        this.markup = Optional.ofNullable(markup);
        return this;
    }

    /**
     * the editor markup used to generate the body of the template
     */
    public Template withMarkup(Optional<? extends String> markup) {
        Utils.checkNotNull(markup, "markup");
        this.markup = markup;
        return this;
    }

    /**
     * the template body before variable interpolation
     */
    public Template withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    /**
     * the template body before variable interpolation
     */
    public Template withBody(Optional<? extends String> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    /**
     * list of variables that are available for use in the template body
     */
    public Template withAvailableVariables(java.util.List<String> availableVariables) {
        Utils.checkNotNull(availableVariables, "availableVariables");
        this.availableVariables = Optional.ofNullable(availableVariables);
        return this;
    }

    /**
     * list of variables that are available for use in the template body
     */
    public Template withAvailableVariables(Optional<? extends java.util.List<String>> availableVariables) {
        Utils.checkNotNull(availableVariables, "availableVariables");
        this.availableVariables = availableVariables;
        return this;
    }

    /**
     * list of variables that must be contained in the template body
     */
    public Template withRequiredVariables(java.util.List<String> requiredVariables) {
        Utils.checkNotNull(requiredVariables, "requiredVariables");
        this.requiredVariables = Optional.ofNullable(requiredVariables);
        return this;
    }

    /**
     * list of variables that must be contained in the template body
     */
    public Template withRequiredVariables(Optional<? extends java.util.List<String>> requiredVariables) {
        Utils.checkNotNull(requiredVariables, "requiredVariables");
        this.requiredVariables = requiredVariables;
        return this;
    }

    public Template withFromEmailName(String fromEmailName) {
        Utils.checkNotNull(fromEmailName, "fromEmailName");
        this.fromEmailName = Optional.ofNullable(fromEmailName);
        return this;
    }

    public Template withFromEmailName(Optional<? extends String> fromEmailName) {
        Utils.checkNotNull(fromEmailName, "fromEmailName");
        this.fromEmailName = fromEmailName;
        return this;
    }

    public Template withReplyToEmailName(String replyToEmailName) {
        Utils.checkNotNull(replyToEmailName, "replyToEmailName");
        this.replyToEmailName = Optional.ofNullable(replyToEmailName);
        return this;
    }

    public Template withReplyToEmailName(Optional<? extends String> replyToEmailName) {
        Utils.checkNotNull(replyToEmailName, "replyToEmailName");
        this.replyToEmailName = replyToEmailName;
        return this;
    }

    public Template withDeliveredByClerk(boolean deliveredByClerk) {
        Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
        this.deliveredByClerk = Optional.ofNullable(deliveredByClerk);
        return this;
    }

    public Template withDeliveredByClerk(Optional<? extends Boolean> deliveredByClerk) {
        Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
        this.deliveredByClerk = deliveredByClerk;
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public Template withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public Template withUpdatedAt(Optional<? extends Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public Template withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public Template withCreatedAt(Optional<? extends Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Template other = (Template) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.object, other.object) &&
            java.util.Objects.deepEquals(this.instanceId, other.instanceId) &&
            java.util.Objects.deepEquals(this.resourceType, other.resourceType) &&
            java.util.Objects.deepEquals(this.templateType, other.templateType) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.slug, other.slug) &&
            java.util.Objects.deepEquals(this.position, other.position) &&
            java.util.Objects.deepEquals(this.canRevert, other.canRevert) &&
            java.util.Objects.deepEquals(this.canDelete, other.canDelete) &&
            java.util.Objects.deepEquals(this.canDisable, other.canDisable) &&
            java.util.Objects.deepEquals(this.subject, other.subject) &&
            java.util.Objects.deepEquals(this.markup, other.markup) &&
            java.util.Objects.deepEquals(this.body, other.body) &&
            java.util.Objects.deepEquals(this.availableVariables, other.availableVariables) &&
            java.util.Objects.deepEquals(this.requiredVariables, other.requiredVariables) &&
            java.util.Objects.deepEquals(this.fromEmailName, other.fromEmailName) &&
            java.util.Objects.deepEquals(this.replyToEmailName, other.replyToEmailName) &&
            java.util.Objects.deepEquals(this.deliveredByClerk, other.deliveredByClerk) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            object,
            instanceId,
            resourceType,
            templateType,
            name,
            slug,
            position,
            canRevert,
            canDelete,
            canDisable,
            subject,
            markup,
            body,
            availableVariables,
            requiredVariables,
            fromEmailName,
            replyToEmailName,
            deliveredByClerk,
            updatedAt,
            createdAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Template.class,
                "id", id,
                "object", object,
                "instanceId", instanceId,
                "resourceType", resourceType,
                "templateType", templateType,
                "name", name,
                "slug", slug,
                "position", position,
                "canRevert", canRevert,
                "canDelete", canDelete,
                "canDisable", canDisable,
                "subject", subject,
                "markup", markup,
                "body", body,
                "availableVariables", availableVariables,
                "requiredVariables", requiredVariables,
                "fromEmailName", fromEmailName,
                "replyToEmailName", replyToEmailName,
                "deliveredByClerk", deliveredByClerk,
                "updatedAt", updatedAt,
                "createdAt", createdAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends TemplateObject> object = Optional.empty();
 
        private JsonNullable<? extends String> instanceId = JsonNullable.undefined();
 
        private Optional<? extends String> resourceType = Optional.empty();
 
        private Optional<? extends String> templateType = Optional.empty();
 
        private Optional<? extends String> name = Optional.empty();
 
        private Optional<? extends String> slug = Optional.empty();
 
        private Optional<? extends Long> position = Optional.empty();
 
        private Optional<? extends Boolean> canRevert = Optional.empty();
 
        private Optional<? extends Boolean> canDelete = Optional.empty();
 
        private Optional<? extends Boolean> canDisable = Optional.empty();
 
        private JsonNullable<? extends String> subject = JsonNullable.undefined();
 
        private Optional<? extends String> markup = Optional.empty();
 
        private Optional<? extends String> body = Optional.empty();
 
        private Optional<? extends java.util.List<String>> availableVariables = Optional.empty();
 
        private Optional<? extends java.util.List<String>> requiredVariables = Optional.empty();
 
        private Optional<? extends String> fromEmailName = Optional.empty();
 
        private Optional<? extends String> replyToEmailName = Optional.empty();
 
        private Optional<? extends Boolean> deliveredByClerk = Optional.empty();
 
        private Optional<? extends Long> updatedAt = Optional.empty();
 
        private Optional<? extends Long> createdAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(TemplateObject object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(Optional<? extends TemplateObject> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        /**
         * the id of the instance the template belongs to
         */
        public Builder instanceId(String instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = JsonNullable.of(instanceId);
            return this;
        }

        /**
         * the id of the instance the template belongs to
         */
        public Builder instanceId(JsonNullable<? extends String> instanceId) {
            Utils.checkNotNull(instanceId, "instanceId");
            this.instanceId = instanceId;
            return this;
        }

        /**
         * whether this is a system (default) or user overridden) template
         */
        public Builder resourceType(String resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = Optional.ofNullable(resourceType);
            return this;
        }

        /**
         * whether this is a system (default) or user overridden) template
         */
        public Builder resourceType(Optional<? extends String> resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = resourceType;
            return this;
        }

        /**
         * whether this is an email or SMS template
         */
        public Builder templateType(String templateType) {
            Utils.checkNotNull(templateType, "templateType");
            this.templateType = Optional.ofNullable(templateType);
            return this;
        }

        /**
         * whether this is an email or SMS template
         */
        public Builder templateType(Optional<? extends String> templateType) {
            Utils.checkNotNull(templateType, "templateType");
            this.templateType = templateType;
            return this;
        }

        /**
         * user-friendly name of the template
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * user-friendly name of the template
         */
        public Builder name(Optional<? extends String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * machine-friendly name of the template
         */
        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = Optional.ofNullable(slug);
            return this;
        }

        /**
         * machine-friendly name of the template
         */
        public Builder slug(Optional<? extends String> slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        /**
         * position with the listing of templates
         */
        public Builder position(long position) {
            Utils.checkNotNull(position, "position");
            this.position = Optional.ofNullable(position);
            return this;
        }

        /**
         * position with the listing of templates
         */
        public Builder position(Optional<? extends Long> position) {
            Utils.checkNotNull(position, "position");
            this.position = position;
            return this;
        }

        /**
         * whether this template can be reverted to the corresponding system default
         */
        public Builder canRevert(boolean canRevert) {
            Utils.checkNotNull(canRevert, "canRevert");
            this.canRevert = Optional.ofNullable(canRevert);
            return this;
        }

        /**
         * whether this template can be reverted to the corresponding system default
         */
        public Builder canRevert(Optional<? extends Boolean> canRevert) {
            Utils.checkNotNull(canRevert, "canRevert");
            this.canRevert = canRevert;
            return this;
        }

        /**
         * whether this template can be deleted
         */
        public Builder canDelete(boolean canDelete) {
            Utils.checkNotNull(canDelete, "canDelete");
            this.canDelete = Optional.ofNullable(canDelete);
            return this;
        }

        /**
         * whether this template can be deleted
         */
        public Builder canDelete(Optional<? extends Boolean> canDelete) {
            Utils.checkNotNull(canDelete, "canDelete");
            this.canDelete = canDelete;
            return this;
        }

        /**
         * whether this template can be disabled, true only for notification SMS templates
         */
        public Builder canDisable(boolean canDisable) {
            Utils.checkNotNull(canDisable, "canDisable");
            this.canDisable = Optional.ofNullable(canDisable);
            return this;
        }

        /**
         * whether this template can be disabled, true only for notification SMS templates
         */
        public Builder canDisable(Optional<? extends Boolean> canDisable) {
            Utils.checkNotNull(canDisable, "canDisable");
            this.canDisable = canDisable;
            return this;
        }

        /**
         * email subject
         */
        public Builder subject(String subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = JsonNullable.of(subject);
            return this;
        }

        /**
         * email subject
         */
        public Builder subject(JsonNullable<? extends String> subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = subject;
            return this;
        }

        /**
         * the editor markup used to generate the body of the template
         */
        public Builder markup(String markup) {
            Utils.checkNotNull(markup, "markup");
            this.markup = Optional.ofNullable(markup);
            return this;
        }

        /**
         * the editor markup used to generate the body of the template
         */
        public Builder markup(Optional<? extends String> markup) {
            Utils.checkNotNull(markup, "markup");
            this.markup = markup;
            return this;
        }

        /**
         * the template body before variable interpolation
         */
        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        /**
         * the template body before variable interpolation
         */
        public Builder body(Optional<? extends String> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        /**
         * list of variables that are available for use in the template body
         */
        public Builder availableVariables(java.util.List<String> availableVariables) {
            Utils.checkNotNull(availableVariables, "availableVariables");
            this.availableVariables = Optional.ofNullable(availableVariables);
            return this;
        }

        /**
         * list of variables that are available for use in the template body
         */
        public Builder availableVariables(Optional<? extends java.util.List<String>> availableVariables) {
            Utils.checkNotNull(availableVariables, "availableVariables");
            this.availableVariables = availableVariables;
            return this;
        }

        /**
         * list of variables that must be contained in the template body
         */
        public Builder requiredVariables(java.util.List<String> requiredVariables) {
            Utils.checkNotNull(requiredVariables, "requiredVariables");
            this.requiredVariables = Optional.ofNullable(requiredVariables);
            return this;
        }

        /**
         * list of variables that must be contained in the template body
         */
        public Builder requiredVariables(Optional<? extends java.util.List<String>> requiredVariables) {
            Utils.checkNotNull(requiredVariables, "requiredVariables");
            this.requiredVariables = requiredVariables;
            return this;
        }

        public Builder fromEmailName(String fromEmailName) {
            Utils.checkNotNull(fromEmailName, "fromEmailName");
            this.fromEmailName = Optional.ofNullable(fromEmailName);
            return this;
        }

        public Builder fromEmailName(Optional<? extends String> fromEmailName) {
            Utils.checkNotNull(fromEmailName, "fromEmailName");
            this.fromEmailName = fromEmailName;
            return this;
        }

        public Builder replyToEmailName(String replyToEmailName) {
            Utils.checkNotNull(replyToEmailName, "replyToEmailName");
            this.replyToEmailName = Optional.ofNullable(replyToEmailName);
            return this;
        }

        public Builder replyToEmailName(Optional<? extends String> replyToEmailName) {
            Utils.checkNotNull(replyToEmailName, "replyToEmailName");
            this.replyToEmailName = replyToEmailName;
            return this;
        }

        public Builder deliveredByClerk(boolean deliveredByClerk) {
            Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
            this.deliveredByClerk = Optional.ofNullable(deliveredByClerk);
            return this;
        }

        public Builder deliveredByClerk(Optional<? extends Boolean> deliveredByClerk) {
            Utils.checkNotNull(deliveredByClerk, "deliveredByClerk");
            this.deliveredByClerk = deliveredByClerk;
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(Optional<? extends Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(Optional<? extends Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }
        
        public Template build() {
            return new Template(
                id,
                object,
                instanceId,
                resourceType,
                templateType,
                name,
                slug,
                position,
                canRevert,
                canDelete,
                canDisable,
                subject,
                markup,
                body,
                availableVariables,
                requiredVariables,
                fromEmailName,
                replyToEmailName,
                deliveredByClerk,
                updatedAt,
                createdAt);
        }
    }
}

