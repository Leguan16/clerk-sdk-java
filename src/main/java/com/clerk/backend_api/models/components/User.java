/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class User {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends UserObject> object;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_id")
    private JsonNullable<? extends String> externalId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_email_address_id")
    private JsonNullable<? extends String> primaryEmailAddressId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_phone_number_id")
    private JsonNullable<? extends String> primaryPhoneNumberId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_web3_wallet_id")
    private JsonNullable<? extends String> primaryWeb3WalletId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("username")
    private JsonNullable<? extends String> username;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<? extends String> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<? extends String> lastName;

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_image_url")
    @Deprecated
    private Optional<? extends String> profileImageUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    private Optional<? extends String> imageUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_image")
    private Optional<? extends Boolean> hasImage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_metadata")
    private Optional<? extends PublicMetadata> publicMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("private_metadata")
    private JsonNullable<? extends PrivateMetadata> privateMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unsafe_metadata")
    private Optional<? extends UnsafeMetadata> unsafeMetadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email_addresses")
    private Optional<? extends java.util.List<EmailAddress>> emailAddresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_numbers")
    private Optional<? extends java.util.List<PhoneNumber>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("web3_wallets")
    private Optional<? extends java.util.List<Web3Wallet>> web3Wallets;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("passkeys")
    private Optional<? extends java.util.List<SchemasPasskey>> passkeys;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password_enabled")
    private Optional<? extends Boolean> passwordEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("two_factor_enabled")
    private Optional<? extends Boolean> twoFactorEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totp_enabled")
    private Optional<? extends Boolean> totpEnabled;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup_code_enabled")
    private Optional<? extends Boolean> backupCodeEnabled;

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mfa_enabled_at")
    private JsonNullable<? extends Long> mfaEnabledAt;

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mfa_disabled_at")
    private JsonNullable<? extends Long> mfaDisabledAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_accounts")
    private Optional<? extends java.util.List<ExternalAccounts>> externalAccounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("saml_accounts")
    private Optional<? extends java.util.List<SAMLAccount>> samlAccounts;

    /**
     * Unix timestamp of last sign-in.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_sign_in_at")
    private JsonNullable<? extends Long> lastSignInAt;

    /**
     * Flag to denote whether user is banned or not.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("banned")
    private Optional<? extends Boolean> banned;

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locked")
    private Optional<? extends Boolean> locked;

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lockout_expires_in_seconds")
    private JsonNullable<? extends Long> lockoutExpiresInSeconds;

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verification_attempts_remaining")
    private JsonNullable<? extends Long> verificationAttemptsRemaining;

    /**
     * Unix timestamp of last update.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<? extends Long> updatedAt;

    /**
     * Unix timestamp of creation.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<? extends Long> createdAt;

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("delete_self_enabled")
    private Optional<? extends Boolean> deleteSelfEnabled;

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("create_organization_enabled")
    private Optional<? extends Boolean> createOrganizationEnabled;

    /**
     * Unix timestamp of the latest session activity, with day precision.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_active_at")
    private JsonNullable<? extends Long> lastActiveAt;

    @JsonCreator
    public User(
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("object") Optional<? extends UserObject> object,
            @JsonProperty("external_id") JsonNullable<? extends String> externalId,
            @JsonProperty("primary_email_address_id") JsonNullable<? extends String> primaryEmailAddressId,
            @JsonProperty("primary_phone_number_id") JsonNullable<? extends String> primaryPhoneNumberId,
            @JsonProperty("primary_web3_wallet_id") JsonNullable<? extends String> primaryWeb3WalletId,
            @JsonProperty("username") JsonNullable<? extends String> username,
            @JsonProperty("first_name") JsonNullable<? extends String> firstName,
            @JsonProperty("last_name") JsonNullable<? extends String> lastName,
            @JsonProperty("profile_image_url") Optional<? extends String> profileImageUrl,
            @JsonProperty("image_url") Optional<? extends String> imageUrl,
            @JsonProperty("has_image") Optional<? extends Boolean> hasImage,
            @JsonProperty("public_metadata") Optional<? extends PublicMetadata> publicMetadata,
            @JsonProperty("private_metadata") JsonNullable<? extends PrivateMetadata> privateMetadata,
            @JsonProperty("unsafe_metadata") Optional<? extends UnsafeMetadata> unsafeMetadata,
            @JsonProperty("email_addresses") Optional<? extends java.util.List<EmailAddress>> emailAddresses,
            @JsonProperty("phone_numbers") Optional<? extends java.util.List<PhoneNumber>> phoneNumbers,
            @JsonProperty("web3_wallets") Optional<? extends java.util.List<Web3Wallet>> web3Wallets,
            @JsonProperty("passkeys") Optional<? extends java.util.List<SchemasPasskey>> passkeys,
            @JsonProperty("password_enabled") Optional<? extends Boolean> passwordEnabled,
            @JsonProperty("two_factor_enabled") Optional<? extends Boolean> twoFactorEnabled,
            @JsonProperty("totp_enabled") Optional<? extends Boolean> totpEnabled,
            @JsonProperty("backup_code_enabled") Optional<? extends Boolean> backupCodeEnabled,
            @JsonProperty("mfa_enabled_at") JsonNullable<? extends Long> mfaEnabledAt,
            @JsonProperty("mfa_disabled_at") JsonNullable<? extends Long> mfaDisabledAt,
            @JsonProperty("external_accounts") Optional<? extends java.util.List<ExternalAccounts>> externalAccounts,
            @JsonProperty("saml_accounts") Optional<? extends java.util.List<SAMLAccount>> samlAccounts,
            @JsonProperty("last_sign_in_at") JsonNullable<? extends Long> lastSignInAt,
            @JsonProperty("banned") Optional<? extends Boolean> banned,
            @JsonProperty("locked") Optional<? extends Boolean> locked,
            @JsonProperty("lockout_expires_in_seconds") JsonNullable<? extends Long> lockoutExpiresInSeconds,
            @JsonProperty("verification_attempts_remaining") JsonNullable<? extends Long> verificationAttemptsRemaining,
            @JsonProperty("updated_at") Optional<? extends Long> updatedAt,
            @JsonProperty("created_at") Optional<? extends Long> createdAt,
            @JsonProperty("delete_self_enabled") Optional<? extends Boolean> deleteSelfEnabled,
            @JsonProperty("create_organization_enabled") Optional<? extends Boolean> createOrganizationEnabled,
            @JsonProperty("last_active_at") JsonNullable<? extends Long> lastActiveAt) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        Utils.checkNotNull(username, "username");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(hasImage, "hasImage");
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(web3Wallets, "web3Wallets");
        Utils.checkNotNull(passkeys, "passkeys");
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
        Utils.checkNotNull(totpEnabled, "totpEnabled");
        Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
        Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
        Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
        Utils.checkNotNull(externalAccounts, "externalAccounts");
        Utils.checkNotNull(samlAccounts, "samlAccounts");
        Utils.checkNotNull(lastSignInAt, "lastSignInAt");
        Utils.checkNotNull(banned, "banned");
        Utils.checkNotNull(locked, "locked");
        Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
        Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        Utils.checkNotNull(lastActiveAt, "lastActiveAt");
        this.id = id;
        this.object = object;
        this.externalId = externalId;
        this.primaryEmailAddressId = primaryEmailAddressId;
        this.primaryPhoneNumberId = primaryPhoneNumberId;
        this.primaryWeb3WalletId = primaryWeb3WalletId;
        this.username = username;
        this.firstName = firstName;
        this.lastName = lastName;
        this.profileImageUrl = profileImageUrl;
        this.imageUrl = imageUrl;
        this.hasImage = hasImage;
        this.publicMetadata = publicMetadata;
        this.privateMetadata = privateMetadata;
        this.unsafeMetadata = unsafeMetadata;
        this.emailAddresses = emailAddresses;
        this.phoneNumbers = phoneNumbers;
        this.web3Wallets = web3Wallets;
        this.passkeys = passkeys;
        this.passwordEnabled = passwordEnabled;
        this.twoFactorEnabled = twoFactorEnabled;
        this.totpEnabled = totpEnabled;
        this.backupCodeEnabled = backupCodeEnabled;
        this.mfaEnabledAt = mfaEnabledAt;
        this.mfaDisabledAt = mfaDisabledAt;
        this.externalAccounts = externalAccounts;
        this.samlAccounts = samlAccounts;
        this.lastSignInAt = lastSignInAt;
        this.banned = banned;
        this.locked = locked;
        this.lockoutExpiresInSeconds = lockoutExpiresInSeconds;
        this.verificationAttemptsRemaining = verificationAttemptsRemaining;
        this.updatedAt = updatedAt;
        this.createdAt = createdAt;
        this.deleteSelfEnabled = deleteSelfEnabled;
        this.createOrganizationEnabled = createOrganizationEnabled;
        this.lastActiveAt = lastActiveAt;
    }
    
    public User() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UserObject> object() {
        return (Optional<UserObject>) object;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> externalId() {
        return (JsonNullable<String>) externalId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> primaryEmailAddressId() {
        return (JsonNullable<String>) primaryEmailAddressId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> primaryPhoneNumberId() {
        return (JsonNullable<String>) primaryPhoneNumberId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> primaryWeb3WalletId() {
        return (JsonNullable<String>) primaryWeb3WalletId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> username() {
        return (JsonNullable<String>) username;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return (JsonNullable<String>) firstName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return (JsonNullable<String>) lastName;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> profileImageUrl() {
        return (Optional<String>) profileImageUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> imageUrl() {
        return (Optional<String>) imageUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> hasImage() {
        return (Optional<Boolean>) hasImage;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PublicMetadata> publicMetadata() {
        return (Optional<PublicMetadata>) publicMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PrivateMetadata> privateMetadata() {
        return (JsonNullable<PrivateMetadata>) privateMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UnsafeMetadata> unsafeMetadata() {
        return (Optional<UnsafeMetadata>) unsafeMetadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<EmailAddress>> emailAddresses() {
        return (Optional<java.util.List<EmailAddress>>) emailAddresses;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<PhoneNumber>> phoneNumbers() {
        return (Optional<java.util.List<PhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<Web3Wallet>> web3Wallets() {
        return (Optional<java.util.List<Web3Wallet>>) web3Wallets;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<SchemasPasskey>> passkeys() {
        return (Optional<java.util.List<SchemasPasskey>>) passkeys;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> passwordEnabled() {
        return (Optional<Boolean>) passwordEnabled;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> twoFactorEnabled() {
        return (Optional<Boolean>) twoFactorEnabled;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> totpEnabled() {
        return (Optional<Boolean>) totpEnabled;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> backupCodeEnabled() {
        return (Optional<Boolean>) backupCodeEnabled;
    }

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Long> mfaEnabledAt() {
        return (JsonNullable<Long>) mfaEnabledAt;
    }

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Long> mfaDisabledAt() {
        return (JsonNullable<Long>) mfaDisabledAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<ExternalAccounts>> externalAccounts() {
        return (Optional<java.util.List<ExternalAccounts>>) externalAccounts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<java.util.List<SAMLAccount>> samlAccounts() {
        return (Optional<java.util.List<SAMLAccount>>) samlAccounts;
    }

    /**
     * Unix timestamp of last sign-in.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Long> lastSignInAt() {
        return (JsonNullable<Long>) lastSignInAt;
    }

    /**
     * Flag to denote whether user is banned or not.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> banned() {
        return (Optional<Boolean>) banned;
    }

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> locked() {
        return (Optional<Boolean>) locked;
    }

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Long> lockoutExpiresInSeconds() {
        return (JsonNullable<Long>) lockoutExpiresInSeconds;
    }

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Long> verificationAttemptsRemaining() {
        return (JsonNullable<Long>) verificationAttemptsRemaining;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> updatedAt() {
        return (Optional<Long>) updatedAt;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Long> createdAt() {
        return (Optional<Long>) createdAt;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> deleteSelfEnabled() {
        return (Optional<Boolean>) deleteSelfEnabled;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> createOrganizationEnabled() {
        return (Optional<Boolean>) createOrganizationEnabled;
    }

    /**
     * Unix timestamp of the latest session activity, with day precision.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Long> lastActiveAt() {
        return (JsonNullable<Long>) lastActiveAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public User withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public User withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public User withObject(UserObject object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     * 
     */
    public User withObject(Optional<? extends UserObject> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public User withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = JsonNullable.of(externalId);
        return this;
    }

    public User withExternalId(JsonNullable<? extends String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public User withPrimaryEmailAddressId(String primaryEmailAddressId) {
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        this.primaryEmailAddressId = JsonNullable.of(primaryEmailAddressId);
        return this;
    }

    public User withPrimaryEmailAddressId(JsonNullable<? extends String> primaryEmailAddressId) {
        Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
        this.primaryEmailAddressId = primaryEmailAddressId;
        return this;
    }

    public User withPrimaryPhoneNumberId(String primaryPhoneNumberId) {
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        this.primaryPhoneNumberId = JsonNullable.of(primaryPhoneNumberId);
        return this;
    }

    public User withPrimaryPhoneNumberId(JsonNullable<? extends String> primaryPhoneNumberId) {
        Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
        this.primaryPhoneNumberId = primaryPhoneNumberId;
        return this;
    }

    public User withPrimaryWeb3WalletId(String primaryWeb3WalletId) {
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        this.primaryWeb3WalletId = JsonNullable.of(primaryWeb3WalletId);
        return this;
    }

    public User withPrimaryWeb3WalletId(JsonNullable<? extends String> primaryWeb3WalletId) {
        Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
        this.primaryWeb3WalletId = primaryWeb3WalletId;
        return this;
    }

    public User withUsername(String username) {
        Utils.checkNotNull(username, "username");
        this.username = JsonNullable.of(username);
        return this;
    }

    public User withUsername(JsonNullable<? extends String> username) {
        Utils.checkNotNull(username, "username");
        this.username = username;
        return this;
    }

    public User withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    public User withFirstName(JsonNullable<? extends String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public User withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    public User withLastName(JsonNullable<? extends String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public User withProfileImageUrl(String profileImageUrl) {
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        this.profileImageUrl = Optional.ofNullable(profileImageUrl);
        return this;
    }

    /**
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public User withProfileImageUrl(Optional<? extends String> profileImageUrl) {
        Utils.checkNotNull(profileImageUrl, "profileImageUrl");
        this.profileImageUrl = profileImageUrl;
        return this;
    }

    public User withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }

    public User withImageUrl(Optional<? extends String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public User withHasImage(boolean hasImage) {
        Utils.checkNotNull(hasImage, "hasImage");
        this.hasImage = Optional.ofNullable(hasImage);
        return this;
    }

    public User withHasImage(Optional<? extends Boolean> hasImage) {
        Utils.checkNotNull(hasImage, "hasImage");
        this.hasImage = hasImage;
        return this;
    }

    public User withPublicMetadata(PublicMetadata publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = Optional.ofNullable(publicMetadata);
        return this;
    }

    public User withPublicMetadata(Optional<? extends PublicMetadata> publicMetadata) {
        Utils.checkNotNull(publicMetadata, "publicMetadata");
        this.publicMetadata = publicMetadata;
        return this;
    }

    public User withPrivateMetadata(PrivateMetadata privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = JsonNullable.of(privateMetadata);
        return this;
    }

    public User withPrivateMetadata(JsonNullable<? extends PrivateMetadata> privateMetadata) {
        Utils.checkNotNull(privateMetadata, "privateMetadata");
        this.privateMetadata = privateMetadata;
        return this;
    }

    public User withUnsafeMetadata(UnsafeMetadata unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
        return this;
    }

    public User withUnsafeMetadata(Optional<? extends UnsafeMetadata> unsafeMetadata) {
        Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
        this.unsafeMetadata = unsafeMetadata;
        return this;
    }

    public User withEmailAddresses(java.util.List<EmailAddress> emailAddresses) {
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        this.emailAddresses = Optional.ofNullable(emailAddresses);
        return this;
    }

    public User withEmailAddresses(Optional<? extends java.util.List<EmailAddress>> emailAddresses) {
        Utils.checkNotNull(emailAddresses, "emailAddresses");
        this.emailAddresses = emailAddresses;
        return this;
    }

    public User withPhoneNumbers(java.util.List<PhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public User withPhoneNumbers(Optional<? extends java.util.List<PhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public User withWeb3Wallets(java.util.List<Web3Wallet> web3Wallets) {
        Utils.checkNotNull(web3Wallets, "web3Wallets");
        this.web3Wallets = Optional.ofNullable(web3Wallets);
        return this;
    }

    public User withWeb3Wallets(Optional<? extends java.util.List<Web3Wallet>> web3Wallets) {
        Utils.checkNotNull(web3Wallets, "web3Wallets");
        this.web3Wallets = web3Wallets;
        return this;
    }

    public User withPasskeys(java.util.List<SchemasPasskey> passkeys) {
        Utils.checkNotNull(passkeys, "passkeys");
        this.passkeys = Optional.ofNullable(passkeys);
        return this;
    }

    public User withPasskeys(Optional<? extends java.util.List<SchemasPasskey>> passkeys) {
        Utils.checkNotNull(passkeys, "passkeys");
        this.passkeys = passkeys;
        return this;
    }

    public User withPasswordEnabled(boolean passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = Optional.ofNullable(passwordEnabled);
        return this;
    }

    public User withPasswordEnabled(Optional<? extends Boolean> passwordEnabled) {
        Utils.checkNotNull(passwordEnabled, "passwordEnabled");
        this.passwordEnabled = passwordEnabled;
        return this;
    }

    public User withTwoFactorEnabled(boolean twoFactorEnabled) {
        Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
        this.twoFactorEnabled = Optional.ofNullable(twoFactorEnabled);
        return this;
    }

    public User withTwoFactorEnabled(Optional<? extends Boolean> twoFactorEnabled) {
        Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
        this.twoFactorEnabled = twoFactorEnabled;
        return this;
    }

    public User withTotpEnabled(boolean totpEnabled) {
        Utils.checkNotNull(totpEnabled, "totpEnabled");
        this.totpEnabled = Optional.ofNullable(totpEnabled);
        return this;
    }

    public User withTotpEnabled(Optional<? extends Boolean> totpEnabled) {
        Utils.checkNotNull(totpEnabled, "totpEnabled");
        this.totpEnabled = totpEnabled;
        return this;
    }

    public User withBackupCodeEnabled(boolean backupCodeEnabled) {
        Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
        this.backupCodeEnabled = Optional.ofNullable(backupCodeEnabled);
        return this;
    }

    public User withBackupCodeEnabled(Optional<? extends Boolean> backupCodeEnabled) {
        Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
        this.backupCodeEnabled = backupCodeEnabled;
        return this;
    }

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     * 
     */
    public User withMfaEnabledAt(long mfaEnabledAt) {
        Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
        this.mfaEnabledAt = JsonNullable.of(mfaEnabledAt);
        return this;
    }

    /**
     * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
     * 
     */
    public User withMfaEnabledAt(JsonNullable<? extends Long> mfaEnabledAt) {
        Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
        this.mfaEnabledAt = mfaEnabledAt;
        return this;
    }

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     * 
     */
    public User withMfaDisabledAt(long mfaDisabledAt) {
        Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
        this.mfaDisabledAt = JsonNullable.of(mfaDisabledAt);
        return this;
    }

    /**
     * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
     * 
     */
    public User withMfaDisabledAt(JsonNullable<? extends Long> mfaDisabledAt) {
        Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
        this.mfaDisabledAt = mfaDisabledAt;
        return this;
    }

    public User withExternalAccounts(java.util.List<ExternalAccounts> externalAccounts) {
        Utils.checkNotNull(externalAccounts, "externalAccounts");
        this.externalAccounts = Optional.ofNullable(externalAccounts);
        return this;
    }

    public User withExternalAccounts(Optional<? extends java.util.List<ExternalAccounts>> externalAccounts) {
        Utils.checkNotNull(externalAccounts, "externalAccounts");
        this.externalAccounts = externalAccounts;
        return this;
    }

    public User withSamlAccounts(java.util.List<SAMLAccount> samlAccounts) {
        Utils.checkNotNull(samlAccounts, "samlAccounts");
        this.samlAccounts = Optional.ofNullable(samlAccounts);
        return this;
    }

    public User withSamlAccounts(Optional<? extends java.util.List<SAMLAccount>> samlAccounts) {
        Utils.checkNotNull(samlAccounts, "samlAccounts");
        this.samlAccounts = samlAccounts;
        return this;
    }

    /**
     * Unix timestamp of last sign-in.
     * 
     */
    public User withLastSignInAt(long lastSignInAt) {
        Utils.checkNotNull(lastSignInAt, "lastSignInAt");
        this.lastSignInAt = JsonNullable.of(lastSignInAt);
        return this;
    }

    /**
     * Unix timestamp of last sign-in.
     * 
     */
    public User withLastSignInAt(JsonNullable<? extends Long> lastSignInAt) {
        Utils.checkNotNull(lastSignInAt, "lastSignInAt");
        this.lastSignInAt = lastSignInAt;
        return this;
    }

    /**
     * Flag to denote whether user is banned or not.
     * 
     */
    public User withBanned(boolean banned) {
        Utils.checkNotNull(banned, "banned");
        this.banned = Optional.ofNullable(banned);
        return this;
    }

    /**
     * Flag to denote whether user is banned or not.
     * 
     */
    public User withBanned(Optional<? extends Boolean> banned) {
        Utils.checkNotNull(banned, "banned");
        this.banned = banned;
        return this;
    }

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     * 
     */
    public User withLocked(boolean locked) {
        Utils.checkNotNull(locked, "locked");
        this.locked = Optional.ofNullable(locked);
        return this;
    }

    /**
     * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
     * 
     */
    public User withLocked(Optional<? extends Boolean> locked) {
        Utils.checkNotNull(locked, "locked");
        this.locked = locked;
        return this;
    }

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     * 
     */
    public User withLockoutExpiresInSeconds(long lockoutExpiresInSeconds) {
        Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
        this.lockoutExpiresInSeconds = JsonNullable.of(lockoutExpiresInSeconds);
        return this;
    }

    /**
     * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
     * 
     */
    public User withLockoutExpiresInSeconds(JsonNullable<? extends Long> lockoutExpiresInSeconds) {
        Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
        this.lockoutExpiresInSeconds = lockoutExpiresInSeconds;
        return this;
    }

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     * 
     */
    public User withVerificationAttemptsRemaining(long verificationAttemptsRemaining) {
        Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
        this.verificationAttemptsRemaining = JsonNullable.of(verificationAttemptsRemaining);
        return this;
    }

    /**
     * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
     * 
     */
    public User withVerificationAttemptsRemaining(JsonNullable<? extends Long> verificationAttemptsRemaining) {
        Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
        this.verificationAttemptsRemaining = verificationAttemptsRemaining;
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public User withUpdatedAt(long updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Unix timestamp of last update.
     * 
     */
    public User withUpdatedAt(Optional<? extends Long> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public User withCreatedAt(long createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Unix timestamp of creation.
     * 
     */
    public User withCreatedAt(Optional<? extends Long> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    public User withDeleteSelfEnabled(boolean deleteSelfEnabled) {
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        this.deleteSelfEnabled = Optional.ofNullable(deleteSelfEnabled);
        return this;
    }

    /**
     * If enabled, user can delete themselves via FAPI.
     * 
     */
    public User withDeleteSelfEnabled(Optional<? extends Boolean> deleteSelfEnabled) {
        Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
        this.deleteSelfEnabled = deleteSelfEnabled;
        return this;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    public User withCreateOrganizationEnabled(boolean createOrganizationEnabled) {
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        this.createOrganizationEnabled = Optional.ofNullable(createOrganizationEnabled);
        return this;
    }

    /**
     * If enabled, user can create organizations via FAPI.
     * 
     */
    public User withCreateOrganizationEnabled(Optional<? extends Boolean> createOrganizationEnabled) {
        Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
        this.createOrganizationEnabled = createOrganizationEnabled;
        return this;
    }

    /**
     * Unix timestamp of the latest session activity, with day precision.
     * 
     */
    public User withLastActiveAt(long lastActiveAt) {
        Utils.checkNotNull(lastActiveAt, "lastActiveAt");
        this.lastActiveAt = JsonNullable.of(lastActiveAt);
        return this;
    }

    /**
     * Unix timestamp of the latest session activity, with day precision.
     * 
     */
    public User withLastActiveAt(JsonNullable<? extends Long> lastActiveAt) {
        Utils.checkNotNull(lastActiveAt, "lastActiveAt");
        this.lastActiveAt = lastActiveAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.object, other.object) &&
            java.util.Objects.deepEquals(this.externalId, other.externalId) &&
            java.util.Objects.deepEquals(this.primaryEmailAddressId, other.primaryEmailAddressId) &&
            java.util.Objects.deepEquals(this.primaryPhoneNumberId, other.primaryPhoneNumberId) &&
            java.util.Objects.deepEquals(this.primaryWeb3WalletId, other.primaryWeb3WalletId) &&
            java.util.Objects.deepEquals(this.username, other.username) &&
            java.util.Objects.deepEquals(this.firstName, other.firstName) &&
            java.util.Objects.deepEquals(this.lastName, other.lastName) &&
            java.util.Objects.deepEquals(this.profileImageUrl, other.profileImageUrl) &&
            java.util.Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            java.util.Objects.deepEquals(this.hasImage, other.hasImage) &&
            java.util.Objects.deepEquals(this.publicMetadata, other.publicMetadata) &&
            java.util.Objects.deepEquals(this.privateMetadata, other.privateMetadata) &&
            java.util.Objects.deepEquals(this.unsafeMetadata, other.unsafeMetadata) &&
            java.util.Objects.deepEquals(this.emailAddresses, other.emailAddresses) &&
            java.util.Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            java.util.Objects.deepEquals(this.web3Wallets, other.web3Wallets) &&
            java.util.Objects.deepEquals(this.passkeys, other.passkeys) &&
            java.util.Objects.deepEquals(this.passwordEnabled, other.passwordEnabled) &&
            java.util.Objects.deepEquals(this.twoFactorEnabled, other.twoFactorEnabled) &&
            java.util.Objects.deepEquals(this.totpEnabled, other.totpEnabled) &&
            java.util.Objects.deepEquals(this.backupCodeEnabled, other.backupCodeEnabled) &&
            java.util.Objects.deepEquals(this.mfaEnabledAt, other.mfaEnabledAt) &&
            java.util.Objects.deepEquals(this.mfaDisabledAt, other.mfaDisabledAt) &&
            java.util.Objects.deepEquals(this.externalAccounts, other.externalAccounts) &&
            java.util.Objects.deepEquals(this.samlAccounts, other.samlAccounts) &&
            java.util.Objects.deepEquals(this.lastSignInAt, other.lastSignInAt) &&
            java.util.Objects.deepEquals(this.banned, other.banned) &&
            java.util.Objects.deepEquals(this.locked, other.locked) &&
            java.util.Objects.deepEquals(this.lockoutExpiresInSeconds, other.lockoutExpiresInSeconds) &&
            java.util.Objects.deepEquals(this.verificationAttemptsRemaining, other.verificationAttemptsRemaining) &&
            java.util.Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            java.util.Objects.deepEquals(this.createdAt, other.createdAt) &&
            java.util.Objects.deepEquals(this.deleteSelfEnabled, other.deleteSelfEnabled) &&
            java.util.Objects.deepEquals(this.createOrganizationEnabled, other.createOrganizationEnabled) &&
            java.util.Objects.deepEquals(this.lastActiveAt, other.lastActiveAt);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            id,
            object,
            externalId,
            primaryEmailAddressId,
            primaryPhoneNumberId,
            primaryWeb3WalletId,
            username,
            firstName,
            lastName,
            profileImageUrl,
            imageUrl,
            hasImage,
            publicMetadata,
            privateMetadata,
            unsafeMetadata,
            emailAddresses,
            phoneNumbers,
            web3Wallets,
            passkeys,
            passwordEnabled,
            twoFactorEnabled,
            totpEnabled,
            backupCodeEnabled,
            mfaEnabledAt,
            mfaDisabledAt,
            externalAccounts,
            samlAccounts,
            lastSignInAt,
            banned,
            locked,
            lockoutExpiresInSeconds,
            verificationAttemptsRemaining,
            updatedAt,
            createdAt,
            deleteSelfEnabled,
            createOrganizationEnabled,
            lastActiveAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "id", id,
                "object", object,
                "externalId", externalId,
                "primaryEmailAddressId", primaryEmailAddressId,
                "primaryPhoneNumberId", primaryPhoneNumberId,
                "primaryWeb3WalletId", primaryWeb3WalletId,
                "username", username,
                "firstName", firstName,
                "lastName", lastName,
                "profileImageUrl", profileImageUrl,
                "imageUrl", imageUrl,
                "hasImage", hasImage,
                "publicMetadata", publicMetadata,
                "privateMetadata", privateMetadata,
                "unsafeMetadata", unsafeMetadata,
                "emailAddresses", emailAddresses,
                "phoneNumbers", phoneNumbers,
                "web3Wallets", web3Wallets,
                "passkeys", passkeys,
                "passwordEnabled", passwordEnabled,
                "twoFactorEnabled", twoFactorEnabled,
                "totpEnabled", totpEnabled,
                "backupCodeEnabled", backupCodeEnabled,
                "mfaEnabledAt", mfaEnabledAt,
                "mfaDisabledAt", mfaDisabledAt,
                "externalAccounts", externalAccounts,
                "samlAccounts", samlAccounts,
                "lastSignInAt", lastSignInAt,
                "banned", banned,
                "locked", locked,
                "lockoutExpiresInSeconds", lockoutExpiresInSeconds,
                "verificationAttemptsRemaining", verificationAttemptsRemaining,
                "updatedAt", updatedAt,
                "createdAt", createdAt,
                "deleteSelfEnabled", deleteSelfEnabled,
                "createOrganizationEnabled", createOrganizationEnabled,
                "lastActiveAt", lastActiveAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends UserObject> object = Optional.empty();
 
        private JsonNullable<? extends String> externalId = JsonNullable.undefined();
 
        private JsonNullable<? extends String> primaryEmailAddressId = JsonNullable.undefined();
 
        private JsonNullable<? extends String> primaryPhoneNumberId = JsonNullable.undefined();
 
        private JsonNullable<? extends String> primaryWeb3WalletId = JsonNullable.undefined();
 
        private JsonNullable<? extends String> username = JsonNullable.undefined();
 
        private JsonNullable<? extends String> firstName = JsonNullable.undefined();
 
        private JsonNullable<? extends String> lastName = JsonNullable.undefined();
 
        @Deprecated
        private Optional<? extends String> profileImageUrl = Optional.empty();
 
        private Optional<? extends String> imageUrl = Optional.empty();
 
        private Optional<? extends Boolean> hasImage = Optional.empty();
 
        private Optional<? extends PublicMetadata> publicMetadata = Optional.empty();
 
        private JsonNullable<? extends PrivateMetadata> privateMetadata = JsonNullable.undefined();
 
        private Optional<? extends UnsafeMetadata> unsafeMetadata = Optional.empty();
 
        private Optional<? extends java.util.List<EmailAddress>> emailAddresses = Optional.empty();
 
        private Optional<? extends java.util.List<PhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<? extends java.util.List<Web3Wallet>> web3Wallets = Optional.empty();
 
        private Optional<? extends java.util.List<SchemasPasskey>> passkeys = Optional.empty();
 
        private Optional<? extends Boolean> passwordEnabled = Optional.empty();
 
        private Optional<? extends Boolean> twoFactorEnabled = Optional.empty();
 
        private Optional<? extends Boolean> totpEnabled = Optional.empty();
 
        private Optional<? extends Boolean> backupCodeEnabled = Optional.empty();
 
        private JsonNullable<? extends Long> mfaEnabledAt = JsonNullable.undefined();
 
        private JsonNullable<? extends Long> mfaDisabledAt = JsonNullable.undefined();
 
        private Optional<? extends java.util.List<ExternalAccounts>> externalAccounts = Optional.empty();
 
        private Optional<? extends java.util.List<SAMLAccount>> samlAccounts = Optional.empty();
 
        private JsonNullable<? extends Long> lastSignInAt = JsonNullable.undefined();
 
        private Optional<? extends Boolean> banned = Optional.empty();
 
        private Optional<? extends Boolean> locked = Optional.empty();
 
        private JsonNullable<? extends Long> lockoutExpiresInSeconds = JsonNullable.undefined();
 
        private JsonNullable<? extends Long> verificationAttemptsRemaining = JsonNullable.undefined();
 
        private Optional<? extends Long> updatedAt = Optional.empty();
 
        private Optional<? extends Long> createdAt = Optional.empty();
 
        private Optional<? extends Boolean> deleteSelfEnabled = Optional.empty();
 
        private Optional<? extends Boolean> createOrganizationEnabled = Optional.empty();
 
        private JsonNullable<? extends Long> lastActiveAt = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(UserObject object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         * 
         */
        public Builder object(Optional<? extends UserObject> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = JsonNullable.of(externalId);
            return this;
        }

        public Builder externalId(JsonNullable<? extends String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        public Builder primaryEmailAddressId(String primaryEmailAddressId) {
            Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
            this.primaryEmailAddressId = JsonNullable.of(primaryEmailAddressId);
            return this;
        }

        public Builder primaryEmailAddressId(JsonNullable<? extends String> primaryEmailAddressId) {
            Utils.checkNotNull(primaryEmailAddressId, "primaryEmailAddressId");
            this.primaryEmailAddressId = primaryEmailAddressId;
            return this;
        }

        public Builder primaryPhoneNumberId(String primaryPhoneNumberId) {
            Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
            this.primaryPhoneNumberId = JsonNullable.of(primaryPhoneNumberId);
            return this;
        }

        public Builder primaryPhoneNumberId(JsonNullable<? extends String> primaryPhoneNumberId) {
            Utils.checkNotNull(primaryPhoneNumberId, "primaryPhoneNumberId");
            this.primaryPhoneNumberId = primaryPhoneNumberId;
            return this;
        }

        public Builder primaryWeb3WalletId(String primaryWeb3WalletId) {
            Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
            this.primaryWeb3WalletId = JsonNullable.of(primaryWeb3WalletId);
            return this;
        }

        public Builder primaryWeb3WalletId(JsonNullable<? extends String> primaryWeb3WalletId) {
            Utils.checkNotNull(primaryWeb3WalletId, "primaryWeb3WalletId");
            this.primaryWeb3WalletId = primaryWeb3WalletId;
            return this;
        }

        public Builder username(String username) {
            Utils.checkNotNull(username, "username");
            this.username = JsonNullable.of(username);
            return this;
        }

        public Builder username(JsonNullable<? extends String> username) {
            Utils.checkNotNull(username, "username");
            this.username = username;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        public Builder firstName(JsonNullable<? extends String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        public Builder lastName(JsonNullable<? extends String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder profileImageUrl(String profileImageUrl) {
            Utils.checkNotNull(profileImageUrl, "profileImageUrl");
            this.profileImageUrl = Optional.ofNullable(profileImageUrl);
            return this;
        }

        /**
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder profileImageUrl(Optional<? extends String> profileImageUrl) {
            Utils.checkNotNull(profileImageUrl, "profileImageUrl");
            this.profileImageUrl = profileImageUrl;
            return this;
        }

        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        public Builder imageUrl(Optional<? extends String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        public Builder hasImage(boolean hasImage) {
            Utils.checkNotNull(hasImage, "hasImage");
            this.hasImage = Optional.ofNullable(hasImage);
            return this;
        }

        public Builder hasImage(Optional<? extends Boolean> hasImage) {
            Utils.checkNotNull(hasImage, "hasImage");
            this.hasImage = hasImage;
            return this;
        }

        public Builder publicMetadata(PublicMetadata publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = Optional.ofNullable(publicMetadata);
            return this;
        }

        public Builder publicMetadata(Optional<? extends PublicMetadata> publicMetadata) {
            Utils.checkNotNull(publicMetadata, "publicMetadata");
            this.publicMetadata = publicMetadata;
            return this;
        }

        public Builder privateMetadata(PrivateMetadata privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = JsonNullable.of(privateMetadata);
            return this;
        }

        public Builder privateMetadata(JsonNullable<? extends PrivateMetadata> privateMetadata) {
            Utils.checkNotNull(privateMetadata, "privateMetadata");
            this.privateMetadata = privateMetadata;
            return this;
        }

        public Builder unsafeMetadata(UnsafeMetadata unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = Optional.ofNullable(unsafeMetadata);
            return this;
        }

        public Builder unsafeMetadata(Optional<? extends UnsafeMetadata> unsafeMetadata) {
            Utils.checkNotNull(unsafeMetadata, "unsafeMetadata");
            this.unsafeMetadata = unsafeMetadata;
            return this;
        }

        public Builder emailAddresses(java.util.List<EmailAddress> emailAddresses) {
            Utils.checkNotNull(emailAddresses, "emailAddresses");
            this.emailAddresses = Optional.ofNullable(emailAddresses);
            return this;
        }

        public Builder emailAddresses(Optional<? extends java.util.List<EmailAddress>> emailAddresses) {
            Utils.checkNotNull(emailAddresses, "emailAddresses");
            this.emailAddresses = emailAddresses;
            return this;
        }

        public Builder phoneNumbers(java.util.List<PhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends java.util.List<PhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder web3Wallets(java.util.List<Web3Wallet> web3Wallets) {
            Utils.checkNotNull(web3Wallets, "web3Wallets");
            this.web3Wallets = Optional.ofNullable(web3Wallets);
            return this;
        }

        public Builder web3Wallets(Optional<? extends java.util.List<Web3Wallet>> web3Wallets) {
            Utils.checkNotNull(web3Wallets, "web3Wallets");
            this.web3Wallets = web3Wallets;
            return this;
        }

        public Builder passkeys(java.util.List<SchemasPasskey> passkeys) {
            Utils.checkNotNull(passkeys, "passkeys");
            this.passkeys = Optional.ofNullable(passkeys);
            return this;
        }

        public Builder passkeys(Optional<? extends java.util.List<SchemasPasskey>> passkeys) {
            Utils.checkNotNull(passkeys, "passkeys");
            this.passkeys = passkeys;
            return this;
        }

        public Builder passwordEnabled(boolean passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = Optional.ofNullable(passwordEnabled);
            return this;
        }

        public Builder passwordEnabled(Optional<? extends Boolean> passwordEnabled) {
            Utils.checkNotNull(passwordEnabled, "passwordEnabled");
            this.passwordEnabled = passwordEnabled;
            return this;
        }

        public Builder twoFactorEnabled(boolean twoFactorEnabled) {
            Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
            this.twoFactorEnabled = Optional.ofNullable(twoFactorEnabled);
            return this;
        }

        public Builder twoFactorEnabled(Optional<? extends Boolean> twoFactorEnabled) {
            Utils.checkNotNull(twoFactorEnabled, "twoFactorEnabled");
            this.twoFactorEnabled = twoFactorEnabled;
            return this;
        }

        public Builder totpEnabled(boolean totpEnabled) {
            Utils.checkNotNull(totpEnabled, "totpEnabled");
            this.totpEnabled = Optional.ofNullable(totpEnabled);
            return this;
        }

        public Builder totpEnabled(Optional<? extends Boolean> totpEnabled) {
            Utils.checkNotNull(totpEnabled, "totpEnabled");
            this.totpEnabled = totpEnabled;
            return this;
        }

        public Builder backupCodeEnabled(boolean backupCodeEnabled) {
            Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
            this.backupCodeEnabled = Optional.ofNullable(backupCodeEnabled);
            return this;
        }

        public Builder backupCodeEnabled(Optional<? extends Boolean> backupCodeEnabled) {
            Utils.checkNotNull(backupCodeEnabled, "backupCodeEnabled");
            this.backupCodeEnabled = backupCodeEnabled;
            return this;
        }

        /**
         * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
         * 
         */
        public Builder mfaEnabledAt(long mfaEnabledAt) {
            Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
            this.mfaEnabledAt = JsonNullable.of(mfaEnabledAt);
            return this;
        }

        /**
         * Unix timestamp of when MFA was last enabled for this user. It should be noted that this field is not nullified if MFA is disabled.
         * 
         */
        public Builder mfaEnabledAt(JsonNullable<? extends Long> mfaEnabledAt) {
            Utils.checkNotNull(mfaEnabledAt, "mfaEnabledAt");
            this.mfaEnabledAt = mfaEnabledAt;
            return this;
        }

        /**
         * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
         * 
         */
        public Builder mfaDisabledAt(long mfaDisabledAt) {
            Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
            this.mfaDisabledAt = JsonNullable.of(mfaDisabledAt);
            return this;
        }

        /**
         * Unix timestamp of when MFA was last disabled for this user. It should be noted that this field is not nullified if MFA is enabled again.
         * 
         */
        public Builder mfaDisabledAt(JsonNullable<? extends Long> mfaDisabledAt) {
            Utils.checkNotNull(mfaDisabledAt, "mfaDisabledAt");
            this.mfaDisabledAt = mfaDisabledAt;
            return this;
        }

        public Builder externalAccounts(java.util.List<ExternalAccounts> externalAccounts) {
            Utils.checkNotNull(externalAccounts, "externalAccounts");
            this.externalAccounts = Optional.ofNullable(externalAccounts);
            return this;
        }

        public Builder externalAccounts(Optional<? extends java.util.List<ExternalAccounts>> externalAccounts) {
            Utils.checkNotNull(externalAccounts, "externalAccounts");
            this.externalAccounts = externalAccounts;
            return this;
        }

        public Builder samlAccounts(java.util.List<SAMLAccount> samlAccounts) {
            Utils.checkNotNull(samlAccounts, "samlAccounts");
            this.samlAccounts = Optional.ofNullable(samlAccounts);
            return this;
        }

        public Builder samlAccounts(Optional<? extends java.util.List<SAMLAccount>> samlAccounts) {
            Utils.checkNotNull(samlAccounts, "samlAccounts");
            this.samlAccounts = samlAccounts;
            return this;
        }

        /**
         * Unix timestamp of last sign-in.
         * 
         */
        public Builder lastSignInAt(long lastSignInAt) {
            Utils.checkNotNull(lastSignInAt, "lastSignInAt");
            this.lastSignInAt = JsonNullable.of(lastSignInAt);
            return this;
        }

        /**
         * Unix timestamp of last sign-in.
         * 
         */
        public Builder lastSignInAt(JsonNullable<? extends Long> lastSignInAt) {
            Utils.checkNotNull(lastSignInAt, "lastSignInAt");
            this.lastSignInAt = lastSignInAt;
            return this;
        }

        /**
         * Flag to denote whether user is banned or not.
         * 
         */
        public Builder banned(boolean banned) {
            Utils.checkNotNull(banned, "banned");
            this.banned = Optional.ofNullable(banned);
            return this;
        }

        /**
         * Flag to denote whether user is banned or not.
         * 
         */
        public Builder banned(Optional<? extends Boolean> banned) {
            Utils.checkNotNull(banned, "banned");
            this.banned = banned;
            return this;
        }

        /**
         * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
         * 
         */
        public Builder locked(boolean locked) {
            Utils.checkNotNull(locked, "locked");
            this.locked = Optional.ofNullable(locked);
            return this;
        }

        /**
         * Flag to denote whether user is currently locked, i.e. restricted from signing in or not.
         * 
         */
        public Builder locked(Optional<? extends Boolean> locked) {
            Utils.checkNotNull(locked, "locked");
            this.locked = locked;
            return this;
        }

        /**
         * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
         * 
         */
        public Builder lockoutExpiresInSeconds(long lockoutExpiresInSeconds) {
            Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
            this.lockoutExpiresInSeconds = JsonNullable.of(lockoutExpiresInSeconds);
            return this;
        }

        /**
         * The number of seconds remaining until the lockout period expires for a locked user. A null value for a locked user indicates that lockout never expires.
         * 
         */
        public Builder lockoutExpiresInSeconds(JsonNullable<? extends Long> lockoutExpiresInSeconds) {
            Utils.checkNotNull(lockoutExpiresInSeconds, "lockoutExpiresInSeconds");
            this.lockoutExpiresInSeconds = lockoutExpiresInSeconds;
            return this;
        }

        /**
         * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
         * 
         */
        public Builder verificationAttemptsRemaining(long verificationAttemptsRemaining) {
            Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
            this.verificationAttemptsRemaining = JsonNullable.of(verificationAttemptsRemaining);
            return this;
        }

        /**
         * The number of verification attempts remaining until the user is locked. Null if account lockout is not enabled. Note: if a user is locked explicitly via the Backend API, they may still have verification attempts remaining.
         * 
         */
        public Builder verificationAttemptsRemaining(JsonNullable<? extends Long> verificationAttemptsRemaining) {
            Utils.checkNotNull(verificationAttemptsRemaining, "verificationAttemptsRemaining");
            this.verificationAttemptsRemaining = verificationAttemptsRemaining;
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(long updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Unix timestamp of last update.
         * 
         */
        public Builder updatedAt(Optional<? extends Long> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(long createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Unix timestamp of creation.
         * 
         */
        public Builder createdAt(Optional<? extends Long> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * If enabled, user can delete themselves via FAPI.
         * 
         */
        public Builder deleteSelfEnabled(boolean deleteSelfEnabled) {
            Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
            this.deleteSelfEnabled = Optional.ofNullable(deleteSelfEnabled);
            return this;
        }

        /**
         * If enabled, user can delete themselves via FAPI.
         * 
         */
        public Builder deleteSelfEnabled(Optional<? extends Boolean> deleteSelfEnabled) {
            Utils.checkNotNull(deleteSelfEnabled, "deleteSelfEnabled");
            this.deleteSelfEnabled = deleteSelfEnabled;
            return this;
        }

        /**
         * If enabled, user can create organizations via FAPI.
         * 
         */
        public Builder createOrganizationEnabled(boolean createOrganizationEnabled) {
            Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
            this.createOrganizationEnabled = Optional.ofNullable(createOrganizationEnabled);
            return this;
        }

        /**
         * If enabled, user can create organizations via FAPI.
         * 
         */
        public Builder createOrganizationEnabled(Optional<? extends Boolean> createOrganizationEnabled) {
            Utils.checkNotNull(createOrganizationEnabled, "createOrganizationEnabled");
            this.createOrganizationEnabled = createOrganizationEnabled;
            return this;
        }

        /**
         * Unix timestamp of the latest session activity, with day precision.
         * 
         */
        public Builder lastActiveAt(long lastActiveAt) {
            Utils.checkNotNull(lastActiveAt, "lastActiveAt");
            this.lastActiveAt = JsonNullable.of(lastActiveAt);
            return this;
        }

        /**
         * Unix timestamp of the latest session activity, with day precision.
         * 
         */
        public Builder lastActiveAt(JsonNullable<? extends Long> lastActiveAt) {
            Utils.checkNotNull(lastActiveAt, "lastActiveAt");
            this.lastActiveAt = lastActiveAt;
            return this;
        }
        
        public User build() {
            return new User(
                id,
                object,
                externalId,
                primaryEmailAddressId,
                primaryPhoneNumberId,
                primaryWeb3WalletId,
                username,
                firstName,
                lastName,
                profileImageUrl,
                imageUrl,
                hasImage,
                publicMetadata,
                privateMetadata,
                unsafeMetadata,
                emailAddresses,
                phoneNumbers,
                web3Wallets,
                passkeys,
                passwordEnabled,
                twoFactorEnabled,
                totpEnabled,
                backupCodeEnabled,
                mfaEnabledAt,
                mfaDisabledAt,
                externalAccounts,
                samlAccounts,
                lastSignInAt,
                banned,
                locked,
                lockoutExpiresInSeconds,
                verificationAttemptsRemaining,
                updatedAt,
                createdAt,
                deleteSelfEnabled,
                createOrganizationEnabled,
                lastActiveAt);
        }
    }
}

