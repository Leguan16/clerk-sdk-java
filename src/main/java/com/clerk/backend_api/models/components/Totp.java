/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;


import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonAnyGetter;
import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Totp - A TOTP (Time-based One-Time Password)
 */

public class Totp {

    @JsonProperty("object")
    private String object;

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("secret")
    private Optional<String> secret;

    @JsonInclude(Include.ALWAYS)
    @JsonProperty("uri")
    private Optional<String> uri;

    @JsonProperty("verified")
    private boolean verified;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("backup_codes")
    private JsonNullable<? extends List<String>> backupCodes;

    @JsonIgnore
    private Map<String, Object> additionalProperties;

    @JsonCreator
    public Totp(
            @JsonProperty("object") String object,
            @JsonProperty("id") String id,
            @JsonProperty("secret") Optional<String> secret,
            @JsonProperty("uri") Optional<String> uri,
            @JsonProperty("verified") boolean verified,
            @JsonProperty("backup_codes") JsonNullable<? extends List<String>> backupCodes) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(secret, "secret");
        Utils.checkNotNull(uri, "uri");
        Utils.checkNotNull(verified, "verified");
        Utils.checkNotNull(backupCodes, "backupCodes");
        this.object = object;
        this.id = id;
        this.secret = secret;
        this.uri = uri;
        this.verified = verified;
        this.backupCodes = backupCodes;
        this.additionalProperties = new HashMap<>();
    }
    
    public Totp(
            String object,
            String id,
            boolean verified) {
        this(object, id, Optional.empty(), Optional.empty(), verified, JsonNullable.undefined());
    }

    @JsonIgnore
    public String object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> secret() {
        return secret;
    }

    @JsonIgnore
    public Optional<String> uri() {
        return uri;
    }

    @JsonIgnore
    public boolean verified() {
        return verified;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> backupCodes() {
        return (JsonNullable<List<String>>) backupCodes;
    }

    @JsonAnyGetter
    public Map<String, Object> additionalProperties() {
        return additionalProperties;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Totp withObject(String object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public Totp withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Totp withSecret(String secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = Optional.ofNullable(secret);
        return this;
    }

    public Totp withSecret(Optional<String> secret) {
        Utils.checkNotNull(secret, "secret");
        this.secret = secret;
        return this;
    }

    public Totp withUri(String uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = Optional.ofNullable(uri);
        return this;
    }

    public Totp withUri(Optional<String> uri) {
        Utils.checkNotNull(uri, "uri");
        this.uri = uri;
        return this;
    }

    public Totp withVerified(boolean verified) {
        Utils.checkNotNull(verified, "verified");
        this.verified = verified;
        return this;
    }

    public Totp withBackupCodes(List<String> backupCodes) {
        Utils.checkNotNull(backupCodes, "backupCodes");
        this.backupCodes = JsonNullable.of(backupCodes);
        return this;
    }

    public Totp withBackupCodes(JsonNullable<? extends List<String>> backupCodes) {
        Utils.checkNotNull(backupCodes, "backupCodes");
        this.backupCodes = backupCodes;
        return this;
    }

    @JsonAnySetter
    public Totp withAdditionalProperty(String key, Object value) {
        // note that value can be null because of the way JsonAnySetter works
        Utils.checkNotNull(key, "key");
        additionalProperties.put(key, value); 
        return this;
    }
    
    public Totp withAdditionalProperties(Map<String, Object> additionalProperties) {
        Utils.checkNotNull(additionalProperties, "additionalProperties");
        this.additionalProperties = additionalProperties;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Totp other = (Totp) o;
        return 
            Objects.deepEquals(this.object, other.object) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.secret, other.secret) &&
            Objects.deepEquals(this.uri, other.uri) &&
            Objects.deepEquals(this.verified, other.verified) &&
            Objects.deepEquals(this.backupCodes, other.backupCodes) &&
            Objects.deepEquals(this.additionalProperties, other.additionalProperties);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            object,
            id,
            secret,
            uri,
            verified,
            backupCodes,
            additionalProperties);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Totp.class,
                "object", object,
                "id", id,
                "secret", secret,
                "uri", uri,
                "verified", verified,
                "backupCodes", backupCodes,
                "additionalProperties", additionalProperties);
    }
    
    public final static class Builder {
 
        private String object;
 
        private String id;
 
        private Optional<String> secret = Optional.empty();
 
        private Optional<String> uri = Optional.empty();
 
        private Boolean verified;
 
        private JsonNullable<? extends List<String>> backupCodes = JsonNullable.undefined();
 
        private Map<String, Object> additionalProperties = new HashMap<>();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder object(String object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder secret(String secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = Optional.ofNullable(secret);
            return this;
        }

        public Builder secret(Optional<String> secret) {
            Utils.checkNotNull(secret, "secret");
            this.secret = secret;
            return this;
        }

        public Builder uri(String uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = Optional.ofNullable(uri);
            return this;
        }

        public Builder uri(Optional<String> uri) {
            Utils.checkNotNull(uri, "uri");
            this.uri = uri;
            return this;
        }

        public Builder verified(boolean verified) {
            Utils.checkNotNull(verified, "verified");
            this.verified = verified;
            return this;
        }

        public Builder backupCodes(List<String> backupCodes) {
            Utils.checkNotNull(backupCodes, "backupCodes");
            this.backupCodes = JsonNullable.of(backupCodes);
            return this;
        }

        public Builder backupCodes(JsonNullable<? extends List<String>> backupCodes) {
            Utils.checkNotNull(backupCodes, "backupCodes");
            this.backupCodes = backupCodes;
            return this;
        }

        public Builder additionalProperty(String key, Object value) {
            Utils.checkNotNull(key, "key");
            // we could be strict about null values (force the user
            // to pass `JsonNullable.of(null)`) but likely to be a bit 
            // annoying for additional properties building so we'll 
            // relax preconditions.
            this.additionalProperties.put(key, value);
            return this;
        }

        public Builder additionalProperties(Map<String, Object> additionalProperties) {
            Utils.checkNotNull(additionalProperties, "additionalProperties");
            this.additionalProperties = additionalProperties;
            return this;
        }
        
        public Totp build() {
            return new Totp(
                object,
                id,
                secret,
                uri,
                verified,
                backupCodes)
                .withAdditionalProperties(additionalProperties);
        }
    }
}

