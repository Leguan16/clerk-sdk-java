/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;

public class InstanceSettings {

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("object")
    private Optional<? extends InstanceSettingsObject> object;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("restricted_to_allowlist")
    private Optional<? extends Boolean> restrictedToAllowlist;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_email_address")
    private Optional<? extends String> fromEmailAddress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("progressive_sign_up")
    private Optional<? extends Boolean> progressiveSignUp;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enhanced_email_deliverability")
    private Optional<? extends Boolean> enhancedEmailDeliverability;

    @JsonCreator
    public InstanceSettings(
            @JsonProperty("object") Optional<? extends InstanceSettingsObject> object,
            @JsonProperty("id") Optional<? extends String> id,
            @JsonProperty("restricted_to_allowlist") Optional<? extends Boolean> restrictedToAllowlist,
            @JsonProperty("from_email_address") Optional<? extends String> fromEmailAddress,
            @JsonProperty("progressive_sign_up") Optional<? extends Boolean> progressiveSignUp,
            @JsonProperty("enhanced_email_deliverability") Optional<? extends Boolean> enhancedEmailDeliverability) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(restrictedToAllowlist, "restrictedToAllowlist");
        Utils.checkNotNull(fromEmailAddress, "fromEmailAddress");
        Utils.checkNotNull(progressiveSignUp, "progressiveSignUp");
        Utils.checkNotNull(enhancedEmailDeliverability, "enhancedEmailDeliverability");
        this.object = object;
        this.id = id;
        this.restrictedToAllowlist = restrictedToAllowlist;
        this.fromEmailAddress = fromEmailAddress;
        this.progressiveSignUp = progressiveSignUp;
        this.enhancedEmailDeliverability = enhancedEmailDeliverability;
    }
    
    public InstanceSettings() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InstanceSettingsObject> object() {
        return (Optional<InstanceSettingsObject>) object;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> id() {
        return (Optional<String>) id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> restrictedToAllowlist() {
        return (Optional<Boolean>) restrictedToAllowlist;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> fromEmailAddress() {
        return (Optional<String>) fromEmailAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> progressiveSignUp() {
        return (Optional<Boolean>) progressiveSignUp;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Boolean> enhancedEmailDeliverability() {
        return (Optional<Boolean>) enhancedEmailDeliverability;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public InstanceSettings withObject(InstanceSettingsObject object) {
        Utils.checkNotNull(object, "object");
        this.object = Optional.ofNullable(object);
        return this;
    }

    /**
     * String representing the object's type. Objects of the same type share the same value.
     */
    public InstanceSettings withObject(Optional<? extends InstanceSettingsObject> object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public InstanceSettings withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public InstanceSettings withId(Optional<? extends String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public InstanceSettings withRestrictedToAllowlist(boolean restrictedToAllowlist) {
        Utils.checkNotNull(restrictedToAllowlist, "restrictedToAllowlist");
        this.restrictedToAllowlist = Optional.ofNullable(restrictedToAllowlist);
        return this;
    }

    public InstanceSettings withRestrictedToAllowlist(Optional<? extends Boolean> restrictedToAllowlist) {
        Utils.checkNotNull(restrictedToAllowlist, "restrictedToAllowlist");
        this.restrictedToAllowlist = restrictedToAllowlist;
        return this;
    }

    public InstanceSettings withFromEmailAddress(String fromEmailAddress) {
        Utils.checkNotNull(fromEmailAddress, "fromEmailAddress");
        this.fromEmailAddress = Optional.ofNullable(fromEmailAddress);
        return this;
    }

    public InstanceSettings withFromEmailAddress(Optional<? extends String> fromEmailAddress) {
        Utils.checkNotNull(fromEmailAddress, "fromEmailAddress");
        this.fromEmailAddress = fromEmailAddress;
        return this;
    }

    public InstanceSettings withProgressiveSignUp(boolean progressiveSignUp) {
        Utils.checkNotNull(progressiveSignUp, "progressiveSignUp");
        this.progressiveSignUp = Optional.ofNullable(progressiveSignUp);
        return this;
    }

    public InstanceSettings withProgressiveSignUp(Optional<? extends Boolean> progressiveSignUp) {
        Utils.checkNotNull(progressiveSignUp, "progressiveSignUp");
        this.progressiveSignUp = progressiveSignUp;
        return this;
    }

    public InstanceSettings withEnhancedEmailDeliverability(boolean enhancedEmailDeliverability) {
        Utils.checkNotNull(enhancedEmailDeliverability, "enhancedEmailDeliverability");
        this.enhancedEmailDeliverability = Optional.ofNullable(enhancedEmailDeliverability);
        return this;
    }

    public InstanceSettings withEnhancedEmailDeliverability(Optional<? extends Boolean> enhancedEmailDeliverability) {
        Utils.checkNotNull(enhancedEmailDeliverability, "enhancedEmailDeliverability");
        this.enhancedEmailDeliverability = enhancedEmailDeliverability;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InstanceSettings other = (InstanceSettings) o;
        return 
            java.util.Objects.deepEquals(this.object, other.object) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.restrictedToAllowlist, other.restrictedToAllowlist) &&
            java.util.Objects.deepEquals(this.fromEmailAddress, other.fromEmailAddress) &&
            java.util.Objects.deepEquals(this.progressiveSignUp, other.progressiveSignUp) &&
            java.util.Objects.deepEquals(this.enhancedEmailDeliverability, other.enhancedEmailDeliverability);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            object,
            id,
            restrictedToAllowlist,
            fromEmailAddress,
            progressiveSignUp,
            enhancedEmailDeliverability);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InstanceSettings.class,
                "object", object,
                "id", id,
                "restrictedToAllowlist", restrictedToAllowlist,
                "fromEmailAddress", fromEmailAddress,
                "progressiveSignUp", progressiveSignUp,
                "enhancedEmailDeliverability", enhancedEmailDeliverability);
    }
    
    public final static class Builder {
 
        private Optional<? extends InstanceSettingsObject> object = Optional.empty();
 
        private Optional<? extends String> id = Optional.empty();
 
        private Optional<? extends Boolean> restrictedToAllowlist = Optional.empty();
 
        private Optional<? extends String> fromEmailAddress = Optional.empty();
 
        private Optional<? extends Boolean> progressiveSignUp = Optional.empty();
 
        private Optional<? extends Boolean> enhancedEmailDeliverability = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(InstanceSettingsObject object) {
            Utils.checkNotNull(object, "object");
            this.object = Optional.ofNullable(object);
            return this;
        }

        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        public Builder object(Optional<? extends InstanceSettingsObject> object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<? extends String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder restrictedToAllowlist(boolean restrictedToAllowlist) {
            Utils.checkNotNull(restrictedToAllowlist, "restrictedToAllowlist");
            this.restrictedToAllowlist = Optional.ofNullable(restrictedToAllowlist);
            return this;
        }

        public Builder restrictedToAllowlist(Optional<? extends Boolean> restrictedToAllowlist) {
            Utils.checkNotNull(restrictedToAllowlist, "restrictedToAllowlist");
            this.restrictedToAllowlist = restrictedToAllowlist;
            return this;
        }

        public Builder fromEmailAddress(String fromEmailAddress) {
            Utils.checkNotNull(fromEmailAddress, "fromEmailAddress");
            this.fromEmailAddress = Optional.ofNullable(fromEmailAddress);
            return this;
        }

        public Builder fromEmailAddress(Optional<? extends String> fromEmailAddress) {
            Utils.checkNotNull(fromEmailAddress, "fromEmailAddress");
            this.fromEmailAddress = fromEmailAddress;
            return this;
        }

        public Builder progressiveSignUp(boolean progressiveSignUp) {
            Utils.checkNotNull(progressiveSignUp, "progressiveSignUp");
            this.progressiveSignUp = Optional.ofNullable(progressiveSignUp);
            return this;
        }

        public Builder progressiveSignUp(Optional<? extends Boolean> progressiveSignUp) {
            Utils.checkNotNull(progressiveSignUp, "progressiveSignUp");
            this.progressiveSignUp = progressiveSignUp;
            return this;
        }

        public Builder enhancedEmailDeliverability(boolean enhancedEmailDeliverability) {
            Utils.checkNotNull(enhancedEmailDeliverability, "enhancedEmailDeliverability");
            this.enhancedEmailDeliverability = Optional.ofNullable(enhancedEmailDeliverability);
            return this;
        }

        public Builder enhancedEmailDeliverability(Optional<? extends Boolean> enhancedEmailDeliverability) {
            Utils.checkNotNull(enhancedEmailDeliverability, "enhancedEmailDeliverability");
            this.enhancedEmailDeliverability = enhancedEmailDeliverability;
            return this;
        }
        
        public InstanceSettings build() {
            return new InstanceSettings(
                object,
                id,
                restrictedToAllowlist,
                fromEmailAddress,
                progressiveSignUp,
                enhancedEmailDeliverability);
        }
    }
}

