/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import org.openapitools.jackson.nullable.JsonNullable;

public class Domain {

    @JsonProperty("object")
    private DomainObject object;

    @JsonProperty("id")
    private String id;

    @JsonProperty("name")
    private String name;

    @JsonProperty("is_satellite")
    private boolean isSatellite;

    @JsonProperty("frontend_api_url")
    private String frontendApiUrl;

    /**
     * Null for satellite domains.
     * 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts_portal_url")
    private JsonNullable<? extends String> accountsPortalUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("proxy_url")
    private JsonNullable<? extends String> proxyUrl;

    @JsonProperty("development_origin")
    private String developmentOrigin;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cname_targets")
    private JsonNullable<? extends java.util.List<CNameTarget>> cnameTargets;

    @JsonCreator
    public Domain(
            @JsonProperty("object") DomainObject object,
            @JsonProperty("id") String id,
            @JsonProperty("name") String name,
            @JsonProperty("is_satellite") boolean isSatellite,
            @JsonProperty("frontend_api_url") String frontendApiUrl,
            @JsonProperty("accounts_portal_url") JsonNullable<? extends String> accountsPortalUrl,
            @JsonProperty("proxy_url") JsonNullable<? extends String> proxyUrl,
            @JsonProperty("development_origin") String developmentOrigin,
            @JsonProperty("cname_targets") JsonNullable<? extends java.util.List<CNameTarget>> cnameTargets) {
        Utils.checkNotNull(object, "object");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(isSatellite, "isSatellite");
        Utils.checkNotNull(frontendApiUrl, "frontendApiUrl");
        Utils.checkNotNull(accountsPortalUrl, "accountsPortalUrl");
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        Utils.checkNotNull(developmentOrigin, "developmentOrigin");
        Utils.checkNotNull(cnameTargets, "cnameTargets");
        this.object = object;
        this.id = id;
        this.name = name;
        this.isSatellite = isSatellite;
        this.frontendApiUrl = frontendApiUrl;
        this.accountsPortalUrl = accountsPortalUrl;
        this.proxyUrl = proxyUrl;
        this.developmentOrigin = developmentOrigin;
        this.cnameTargets = cnameTargets;
    }
    
    public Domain(
            DomainObject object,
            String id,
            String name,
            boolean isSatellite,
            String frontendApiUrl,
            String developmentOrigin) {
        this(object, id, name, isSatellite, frontendApiUrl, JsonNullable.undefined(), JsonNullable.undefined(), developmentOrigin, JsonNullable.undefined());
    }

    @JsonIgnore
    public DomainObject object() {
        return object;
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public boolean isSatellite() {
        return isSatellite;
    }

    @JsonIgnore
    public String frontendApiUrl() {
        return frontendApiUrl;
    }

    /**
     * Null for satellite domains.
     * 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> accountsPortalUrl() {
        return (JsonNullable<String>) accountsPortalUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<String> proxyUrl() {
        return (JsonNullable<String>) proxyUrl;
    }

    @JsonIgnore
    public String developmentOrigin() {
        return developmentOrigin;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<java.util.List<CNameTarget>> cnameTargets() {
        return (JsonNullable<java.util.List<CNameTarget>>) cnameTargets;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Domain withObject(DomainObject object) {
        Utils.checkNotNull(object, "object");
        this.object = object;
        return this;
    }

    public Domain withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Domain withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Domain withIsSatellite(boolean isSatellite) {
        Utils.checkNotNull(isSatellite, "isSatellite");
        this.isSatellite = isSatellite;
        return this;
    }

    public Domain withFrontendApiUrl(String frontendApiUrl) {
        Utils.checkNotNull(frontendApiUrl, "frontendApiUrl");
        this.frontendApiUrl = frontendApiUrl;
        return this;
    }

    /**
     * Null for satellite domains.
     * 
     */
    public Domain withAccountsPortalUrl(String accountsPortalUrl) {
        Utils.checkNotNull(accountsPortalUrl, "accountsPortalUrl");
        this.accountsPortalUrl = JsonNullable.of(accountsPortalUrl);
        return this;
    }

    /**
     * Null for satellite domains.
     * 
     */
    public Domain withAccountsPortalUrl(JsonNullable<? extends String> accountsPortalUrl) {
        Utils.checkNotNull(accountsPortalUrl, "accountsPortalUrl");
        this.accountsPortalUrl = accountsPortalUrl;
        return this;
    }

    public Domain withProxyUrl(String proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = JsonNullable.of(proxyUrl);
        return this;
    }

    public Domain withProxyUrl(JsonNullable<? extends String> proxyUrl) {
        Utils.checkNotNull(proxyUrl, "proxyUrl");
        this.proxyUrl = proxyUrl;
        return this;
    }

    public Domain withDevelopmentOrigin(String developmentOrigin) {
        Utils.checkNotNull(developmentOrigin, "developmentOrigin");
        this.developmentOrigin = developmentOrigin;
        return this;
    }

    public Domain withCnameTargets(java.util.List<CNameTarget> cnameTargets) {
        Utils.checkNotNull(cnameTargets, "cnameTargets");
        this.cnameTargets = JsonNullable.of(cnameTargets);
        return this;
    }

    public Domain withCnameTargets(JsonNullable<? extends java.util.List<CNameTarget>> cnameTargets) {
        Utils.checkNotNull(cnameTargets, "cnameTargets");
        this.cnameTargets = cnameTargets;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Domain other = (Domain) o;
        return 
            java.util.Objects.deepEquals(this.object, other.object) &&
            java.util.Objects.deepEquals(this.id, other.id) &&
            java.util.Objects.deepEquals(this.name, other.name) &&
            java.util.Objects.deepEquals(this.isSatellite, other.isSatellite) &&
            java.util.Objects.deepEquals(this.frontendApiUrl, other.frontendApiUrl) &&
            java.util.Objects.deepEquals(this.accountsPortalUrl, other.accountsPortalUrl) &&
            java.util.Objects.deepEquals(this.proxyUrl, other.proxyUrl) &&
            java.util.Objects.deepEquals(this.developmentOrigin, other.developmentOrigin) &&
            java.util.Objects.deepEquals(this.cnameTargets, other.cnameTargets);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            object,
            id,
            name,
            isSatellite,
            frontendApiUrl,
            accountsPortalUrl,
            proxyUrl,
            developmentOrigin,
            cnameTargets);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Domain.class,
                "object", object,
                "id", id,
                "name", name,
                "isSatellite", isSatellite,
                "frontendApiUrl", frontendApiUrl,
                "accountsPortalUrl", accountsPortalUrl,
                "proxyUrl", proxyUrl,
                "developmentOrigin", developmentOrigin,
                "cnameTargets", cnameTargets);
    }
    
    public final static class Builder {
 
        private DomainObject object;
 
        private String id;
 
        private String name;
 
        private Boolean isSatellite;
 
        private String frontendApiUrl;
 
        private JsonNullable<? extends String> accountsPortalUrl = JsonNullable.undefined();
 
        private JsonNullable<? extends String> proxyUrl = JsonNullable.undefined();
 
        private String developmentOrigin;
 
        private JsonNullable<? extends java.util.List<CNameTarget>> cnameTargets = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder object(DomainObject object) {
            Utils.checkNotNull(object, "object");
            this.object = object;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder isSatellite(boolean isSatellite) {
            Utils.checkNotNull(isSatellite, "isSatellite");
            this.isSatellite = isSatellite;
            return this;
        }

        public Builder frontendApiUrl(String frontendApiUrl) {
            Utils.checkNotNull(frontendApiUrl, "frontendApiUrl");
            this.frontendApiUrl = frontendApiUrl;
            return this;
        }

        /**
         * Null for satellite domains.
         * 
         */
        public Builder accountsPortalUrl(String accountsPortalUrl) {
            Utils.checkNotNull(accountsPortalUrl, "accountsPortalUrl");
            this.accountsPortalUrl = JsonNullable.of(accountsPortalUrl);
            return this;
        }

        /**
         * Null for satellite domains.
         * 
         */
        public Builder accountsPortalUrl(JsonNullable<? extends String> accountsPortalUrl) {
            Utils.checkNotNull(accountsPortalUrl, "accountsPortalUrl");
            this.accountsPortalUrl = accountsPortalUrl;
            return this;
        }

        public Builder proxyUrl(String proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = JsonNullable.of(proxyUrl);
            return this;
        }

        public Builder proxyUrl(JsonNullable<? extends String> proxyUrl) {
            Utils.checkNotNull(proxyUrl, "proxyUrl");
            this.proxyUrl = proxyUrl;
            return this;
        }

        public Builder developmentOrigin(String developmentOrigin) {
            Utils.checkNotNull(developmentOrigin, "developmentOrigin");
            this.developmentOrigin = developmentOrigin;
            return this;
        }

        public Builder cnameTargets(java.util.List<CNameTarget> cnameTargets) {
            Utils.checkNotNull(cnameTargets, "cnameTargets");
            this.cnameTargets = JsonNullable.of(cnameTargets);
            return this;
        }

        public Builder cnameTargets(JsonNullable<? extends java.util.List<CNameTarget>> cnameTargets) {
            Utils.checkNotNull(cnameTargets, "cnameTargets");
            this.cnameTargets = cnameTargets;
            return this;
        }
        
        public Domain build() {
            return new Domain(
                object,
                id,
                name,
                isSatellite,
                frontendApiUrl,
                accountsPortalUrl,
                proxyUrl,
                developmentOrigin,
                cnameTargets);
        }
    }
}

