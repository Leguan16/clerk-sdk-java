/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.components;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class Oauth {

    @JsonProperty("status")
    private OauthVerificationStatus status;

    @JsonProperty("strategy")
    private OauthVerificationStrategy strategy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_verification_redirect_url")
    private Optional<? extends String> externalVerificationRedirectUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private JsonNullable<? extends Error> error;

    @JsonProperty("expire_at")
    private long expireAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attempts")
    private JsonNullable<? extends Long> attempts;

    @JsonCreator
    public Oauth(
            @JsonProperty("status") OauthVerificationStatus status,
            @JsonProperty("strategy") OauthVerificationStrategy strategy,
            @JsonProperty("external_verification_redirect_url") Optional<? extends String> externalVerificationRedirectUrl,
            @JsonProperty("error") JsonNullable<? extends Error> error,
            @JsonProperty("expire_at") long expireAt,
            @JsonProperty("attempts") JsonNullable<? extends Long> attempts) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(strategy, "strategy");
        Utils.checkNotNull(externalVerificationRedirectUrl, "externalVerificationRedirectUrl");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(expireAt, "expireAt");
        Utils.checkNotNull(attempts, "attempts");
        this.status = status;
        this.strategy = strategy;
        this.externalVerificationRedirectUrl = externalVerificationRedirectUrl;
        this.error = error;
        this.expireAt = expireAt;
        this.attempts = attempts;
    }
    
    public Oauth(
            OauthVerificationStatus status,
            OauthVerificationStrategy strategy,
            long expireAt) {
        this(status, strategy, Optional.empty(), JsonNullable.undefined(), expireAt, JsonNullable.undefined());
    }

    @JsonIgnore
    public OauthVerificationStatus status() {
        return status;
    }

    @JsonIgnore
    public OauthVerificationStrategy strategy() {
        return strategy;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<String> externalVerificationRedirectUrl() {
        return (Optional<String>) externalVerificationRedirectUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Error> error() {
        return (JsonNullable<Error>) error;
    }

    @JsonIgnore
    public long expireAt() {
        return expireAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Long> attempts() {
        return (JsonNullable<Long>) attempts;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Oauth withStatus(OauthVerificationStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public Oauth withStrategy(OauthVerificationStrategy strategy) {
        Utils.checkNotNull(strategy, "strategy");
        this.strategy = strategy;
        return this;
    }

    public Oauth withExternalVerificationRedirectUrl(String externalVerificationRedirectUrl) {
        Utils.checkNotNull(externalVerificationRedirectUrl, "externalVerificationRedirectUrl");
        this.externalVerificationRedirectUrl = Optional.ofNullable(externalVerificationRedirectUrl);
        return this;
    }

    public Oauth withExternalVerificationRedirectUrl(Optional<? extends String> externalVerificationRedirectUrl) {
        Utils.checkNotNull(externalVerificationRedirectUrl, "externalVerificationRedirectUrl");
        this.externalVerificationRedirectUrl = externalVerificationRedirectUrl;
        return this;
    }

    public Oauth withError(Error error) {
        Utils.checkNotNull(error, "error");
        this.error = JsonNullable.of(error);
        return this;
    }

    public Oauth withError(JsonNullable<? extends Error> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public Oauth withExpireAt(long expireAt) {
        Utils.checkNotNull(expireAt, "expireAt");
        this.expireAt = expireAt;
        return this;
    }

    public Oauth withAttempts(long attempts) {
        Utils.checkNotNull(attempts, "attempts");
        this.attempts = JsonNullable.of(attempts);
        return this;
    }

    public Oauth withAttempts(JsonNullable<? extends Long> attempts) {
        Utils.checkNotNull(attempts, "attempts");
        this.attempts = attempts;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Oauth other = (Oauth) o;
        return 
            java.util.Objects.deepEquals(this.status, other.status) &&
            java.util.Objects.deepEquals(this.strategy, other.strategy) &&
            java.util.Objects.deepEquals(this.externalVerificationRedirectUrl, other.externalVerificationRedirectUrl) &&
            java.util.Objects.deepEquals(this.error, other.error) &&
            java.util.Objects.deepEquals(this.expireAt, other.expireAt) &&
            java.util.Objects.deepEquals(this.attempts, other.attempts);
    }
    
    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            status,
            strategy,
            externalVerificationRedirectUrl,
            error,
            expireAt,
            attempts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Oauth.class,
                "status", status,
                "strategy", strategy,
                "externalVerificationRedirectUrl", externalVerificationRedirectUrl,
                "error", error,
                "expireAt", expireAt,
                "attempts", attempts);
    }
    
    public final static class Builder {
 
        private OauthVerificationStatus status;
 
        private OauthVerificationStrategy strategy;
 
        private Optional<? extends String> externalVerificationRedirectUrl = Optional.empty();
 
        private JsonNullable<? extends Error> error = JsonNullable.undefined();
 
        private Long expireAt;
 
        private JsonNullable<? extends Long> attempts = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder status(OauthVerificationStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder strategy(OauthVerificationStrategy strategy) {
            Utils.checkNotNull(strategy, "strategy");
            this.strategy = strategy;
            return this;
        }

        public Builder externalVerificationRedirectUrl(String externalVerificationRedirectUrl) {
            Utils.checkNotNull(externalVerificationRedirectUrl, "externalVerificationRedirectUrl");
            this.externalVerificationRedirectUrl = Optional.ofNullable(externalVerificationRedirectUrl);
            return this;
        }

        public Builder externalVerificationRedirectUrl(Optional<? extends String> externalVerificationRedirectUrl) {
            Utils.checkNotNull(externalVerificationRedirectUrl, "externalVerificationRedirectUrl");
            this.externalVerificationRedirectUrl = externalVerificationRedirectUrl;
            return this;
        }

        public Builder error(Error error) {
            Utils.checkNotNull(error, "error");
            this.error = JsonNullable.of(error);
            return this;
        }

        public Builder error(JsonNullable<? extends Error> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder expireAt(long expireAt) {
            Utils.checkNotNull(expireAt, "expireAt");
            this.expireAt = expireAt;
            return this;
        }

        public Builder attempts(long attempts) {
            Utils.checkNotNull(attempts, "attempts");
            this.attempts = JsonNullable.of(attempts);
            return this;
        }

        public Builder attempts(JsonNullable<? extends Long> attempts) {
            Utils.checkNotNull(attempts, "attempts");
            this.attempts = attempts;
            return this;
        }
        
        public Oauth build() {
            return new Oauth(
                status,
                strategy,
                externalVerificationRedirectUrl,
                error,
                expireAt,
                attempts);
        }
    }
}

