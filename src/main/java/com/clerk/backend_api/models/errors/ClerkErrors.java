/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.clerk.backend_api.models.errors;

import com.clerk.backend_api.utils.Utils;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonFormat;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Deprecated;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.http.HttpResponse;
import java.util.Optional;

/**
 * ClerkErrors - Request was not successful
 */
public class ClerkErrors extends RuntimeException {

    @JsonProperty("errors")
    private java.util.List<com.clerk.backend_api.models.components.ClerkError> errors;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    private Optional<? extends Meta> meta;

    @JsonCreator
    public ClerkErrors(
            @JsonProperty("errors") java.util.List<com.clerk.backend_api.models.components.ClerkError> errors,
            @JsonProperty("meta") Optional<? extends Meta> meta) {
        Utils.checkNotNull(errors, "errors");
        Utils.checkNotNull(meta, "meta");
        this.errors = errors;
        this.meta = meta;
    }
    
    public ClerkErrors(
            java.util.List<com.clerk.backend_api.models.components.ClerkError> errors) {
        this(errors, Optional.empty());
    }

    public java.util.List<com.clerk.backend_api.models.components.ClerkError> errors(){
        return errors;
    }

    public Optional<? extends Meta> meta(){
        return meta;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public ClerkErrors withErrors(java.util.List<com.clerk.backend_api.models.components.ClerkError> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    public ClerkErrors withMeta(Meta meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = Optional.ofNullable(meta);
        return this;
    }
    
    public ClerkErrors withMeta(Optional<? extends Meta> meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ClerkErrors other = (ClerkErrors) o;
        return
            java.util.Objects.deepEquals(this.errors, other.errors) &&
            java.util.Objects.deepEquals(this.meta, other.meta);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            errors,
            meta);
    }

    @Override
    public String toString() {
        return Utils.toString(ClerkErrors.class,
                "errors", errors,
                "meta", meta);
    }

    public final static class Builder {

        private java.util.List<com.clerk.backend_api.models.components.ClerkError> errors;

        private Optional<? extends Meta> meta = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        public Builder errors(java.util.List<com.clerk.backend_api.models.components.ClerkError> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }

        public Builder meta(Meta meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = Optional.ofNullable(meta);
            return this;
        }
        
        public Builder meta(Optional<? extends Meta> meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }

        public ClerkErrors build() {
            return new ClerkErrors(
                errors,
                meta);
        }
    }
}
